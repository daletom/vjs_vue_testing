import {
  require_document,
  require_window,
  video_es_default
} from "./chunk-UM2NEVYN.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/videojs-contrib-ads/dist/videojs-contrib-ads.es.js
var import_window = __toESM(require_window());
var import_document = __toESM(require_document());
var version = "6.9.0";
function getAds(player) {
  return {
    disableNextSnapshotRestore: false,
    _contentEnding: false,
    _contentHasEnded: false,
    _hasThereBeenALoadStartDuringPlayerLife: false,
    _hasThereBeenALoadedData: false,
    _hasThereBeenALoadedMetaData: false,
    _inLinearAdMode: false,
    _shouldBlockPlay: false,
    _playBlocked: false,
    _playRequested: false,
    adType: null,
    VERSION: version,
    reset: function reset() {
      player.ads.disableNextSnapshotRestore = false;
      player.ads._contentEnding = false;
      player.ads._contentHasEnded = false;
      player.ads.snapshot = null;
      player.ads.adType = null;
      player.ads._hasThereBeenALoadedData = false;
      player.ads._hasThereBeenALoadedMetaData = false;
      player.ads._cancelledPlay = false;
      player.ads._shouldBlockPlay = false;
      player.ads._playBlocked = false;
      player.ads.nopreroll_ = false;
      player.ads.nopostroll_ = false;
      player.ads._playRequested = false;
    },
    startLinearAdMode: function startLinearAdMode() {
      player.ads._state.startLinearAdMode();
    },
    endLinearAdMode: function endLinearAdMode() {
      player.ads._state.endLinearAdMode();
    },
    skipLinearAdMode: function skipLinearAdMode() {
      player.ads._state.skipLinearAdMode();
    },
    stitchedAds: function stitchedAds(arg) {
      if (arg !== void 0) {
        video_es_default.log.warn("Using player.ads.stitchedAds() as a setter is deprecated, it should be set as an option upon initialization of contrib-ads.");
        this.settings.stitchedAds = !!arg;
      }
      return this.settings.stitchedAds;
    },
    videoElementRecycled: function videoElementRecycled() {
      if (player.ads.shouldPlayContentBehindAd(player)) {
        return false;
      }
      if (!this.snapshot) {
        throw new Error("You cannot use videoElementRecycled while there is no snapshot.");
      }
      var srcChanged = player.tech_.src() !== this.snapshot.src;
      var currentSrcChanged = player.currentSrc() !== this.snapshot.currentSrc;
      return srcChanged || currentSrcChanged;
    },
    isLive: function isLive(somePlayer) {
      if (somePlayer === void 0) {
        somePlayer = player;
      }
      if (typeof somePlayer.ads.settings.contentIsLive === "boolean") {
        return somePlayer.ads.settings.contentIsLive;
      } else if (somePlayer.duration() === Infinity) {
        return true;
      } else if (video_es_default.browser.IOS_VERSION === "8" && somePlayer.duration() === 0) {
        return true;
      }
      return false;
    },
    shouldPlayContentBehindAd: function shouldPlayContentBehindAd(somePlayer) {
      if (somePlayer === void 0) {
        somePlayer = player;
      }
      if (!somePlayer) {
        throw new Error("shouldPlayContentBehindAd requires a player as a param");
      } else if (!somePlayer.ads.settings.liveCuePoints) {
        return false;
      } else {
        return !video_es_default.browser.IS_IOS && !video_es_default.browser.IS_ANDROID && somePlayer.duration() === Infinity;
      }
    },
    shouldTakeSnapshots: function shouldTakeSnapshots(somePlayer) {
      if (somePlayer === void 0) {
        somePlayer = player;
      }
      return !this.shouldPlayContentBehindAd(somePlayer) && !this.stitchedAds();
    },
    isInAdMode: function isInAdMode() {
      return this._state.isAdState();
    },
    isWaitingForAdBreak: function isWaitingForAdBreak() {
      return this._state.isWaitingForAdBreak();
    },
    isContentResuming: function isContentResuming() {
      return this._state.isContentResuming();
    },
    isAdPlaying: function isAdPlaying() {
      return this._state.inAdBreak();
    },
    inAdBreak: function inAdBreak() {
      return this._state.inAdBreak();
    },
    removeNativePoster: function removeNativePoster() {
      var tech = player.$(".vjs-tech");
      if (tech) {
        tech.removeAttribute("poster");
      }
    },
    debug: function debug() {
      if (this.settings.debug) {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (args.length === 1 && typeof args[0] === "string") {
          video_es_default.log("ADS: " + args[0]);
        } else {
          video_es_default.log.apply(video_es_default, ["ADS:"].concat(args));
        }
      }
    }
  };
}
var cancelEvent = function cancelEvent2(player, event) {
  event.isImmediatePropagationStopped = function() {
    return true;
  };
  event.cancelBubble = true;
  event.isPropagationStopped = function() {
    return true;
  };
};
var prefixEvent = function prefixEvent2(player, prefix, event) {
  cancelEvent(player, event);
  player.trigger({
    type: prefix + event.type,
    originalEvent: event
  });
};
var handlePlaying = function handlePlaying2(player, event) {
  if (player.ads.isInAdMode()) {
    if (player.ads.isContentResuming()) {
      if (player.ads._contentEnding) {
        prefixEvent(player, "content", event);
      }
    } else {
      prefixEvent(player, "ad", event);
    }
  }
};
var handleEnded = function handleEnded2(player, event) {
  if (player.ads.isInAdMode()) {
    if (player.ads.isContentResuming()) {
      cancelEvent(player, event);
      player.trigger("resumeended");
    } else {
      prefixEvent(player, "ad", event);
    }
  } else if (!player.ads._contentHasEnded && !player.ads.stitchedAds()) {
    prefixEvent(player, "content", event);
    player.trigger("readyforpostroll");
  }
};
var handleLoadEvent = function handleLoadEvent2(player, event) {
  if (event.type === "loadstart" && !player.ads._hasThereBeenALoadStartDuringPlayerLife || event.type === "loadeddata" && !player.ads._hasThereBeenALoadedData || event.type === "loadedmetadata" && !player.ads._hasThereBeenALoadedMetaData) {
    return;
  } else if (player.ads.inAdBreak()) {
    prefixEvent(player, "ad", event);
  } else if (player.currentSrc() !== player.ads.contentSrc) {
    return;
  } else {
    prefixEvent(player, "content", event);
  }
};
var handlePlay = function handlePlay2(player, event) {
  if (player.ads.inAdBreak()) {
    prefixEvent(player, "ad", event);
  } else if (player.ads.isContentResuming()) {
    prefixEvent(player, "content", event);
  }
};
function redispatch(event) {
  if (event.type === "playing") {
    handlePlaying(this, event);
  } else if (event.type === "ended") {
    handleEnded(this, event);
  } else if (event.type === "loadstart" || event.type === "loadeddata" || event.type === "loadedmetadata") {
    handleLoadEvent(this, event);
  } else if (event.type === "play") {
    handlePlay(this, event);
  } else if (this.ads.isInAdMode()) {
    if (this.ads.isContentResuming()) {
      prefixEvent(this, "content", event);
    } else {
      prefixEvent(this, "ad", event);
    }
  }
}
function initializeContentupdate(player) {
  player.ads.contentSrc = player.currentSrc();
  player.ads._seenInitialLoadstart = false;
  var checkSrc = function checkSrc2() {
    if (!player.ads.inAdBreak()) {
      var src = player.currentSrc();
      if (src !== player.ads.contentSrc) {
        if (player.ads._seenInitialLoadstart) {
          player.trigger({
            type: "contentchanged"
          });
        }
        player.trigger({
          type: "contentupdate",
          oldValue: player.ads.contentSrc,
          newValue: src
        });
        player.ads.contentSrc = src;
      }
      player.ads._seenInitialLoadstart = true;
    }
  };
  player.on("loadstart", checkSrc);
}
var tcData = {};
var proxyTcfApi = function proxyTcfApi2(_) {
  if (video_es_default.dom.isInFrame() && typeof import_window.default.__tcfapi !== "function") {
    var frame = import_window.default;
    var cmpFrame;
    var cmpCallbacks = {};
    while (frame) {
      try {
        if (frame.frames.__tcfapiLocator) {
          cmpFrame = frame;
          break;
        }
      } catch (ignore) {
      }
      if (frame === import_window.default.top) {
        break;
      }
      frame = frame.parent;
    }
    if (!cmpFrame) {
      return;
    }
    import_window.default.__tcfapi = function(cmd, version2, callback, arg) {
      var callId = Math.random() + "";
      var msg = {
        __tcfapiCall: {
          command: cmd,
          parameter: arg,
          version: version2,
          callId
        }
      };
      cmpCallbacks[callId] = callback;
      cmpFrame.postMessage(msg, "*");
    };
    import_window.default.addEventListener("message", function(event) {
      var json = {};
      try {
        json = typeof event.data === "string" ? JSON.parse(event.data) : event.data;
      } catch (ignore) {
      }
      var payload = json.__tcfapiReturn;
      if (payload) {
        if (typeof cmpCallbacks[payload.callId] === "function") {
          cmpCallbacks[payload.callId](payload.returnValue, payload.success);
          cmpCallbacks[payload.callId] = null;
        }
      }
    }, false);
  }
};
var listenToTcf = function listenToTcf2() {
  proxyTcfApi();
  if (typeof import_window.default.__tcfapi === "function") {
    import_window.default.__tcfapi("addEventListener", 2, function(data, success) {
      if (success) {
        tcData = data;
      }
    });
  }
};
var uriEncodeIfNeeded = function uriEncodeIfNeeded2(value, uriEncode) {
  if (uriEncode) {
    return encodeURIComponent(value);
  }
  return value;
};
var customFields = function customFields2(mediainfo, macros, customFieldsName) {
  if (mediainfo && mediainfo[customFieldsName]) {
    var fields = mediainfo[customFieldsName];
    var fieldNames = Object.keys(fields);
    for (var i = 0; i < fieldNames.length; i++) {
      var tag = "{mediainfo." + customFieldsName + "." + fieldNames[i] + "}";
      macros[tag] = fields[fieldNames[i]];
    }
  }
};
function adMacroReplacement(string, uriEncode, customMacros) {
  var _this = this;
  var defaults2 = {};
  string = string.replace(/{([^}=]+)=([^}]+)}/g, function(match, name, defaultVal2) {
    defaults2["{" + name + "}"] = defaultVal2;
    return "{" + name + "}";
  });
  if (uriEncode === void 0) {
    uriEncode = false;
  }
  var macros = {};
  if (customMacros !== void 0) {
    macros = customMacros;
  }
  macros["{player.id}"] = this.options_["data-player"] || this.id_;
  macros["{player.height}"] = this.currentHeight();
  macros["{player.width}"] = this.currentWidth();
  macros["{mediainfo.id}"] = this.mediainfo ? this.mediainfo.id : "";
  macros["{mediainfo.name}"] = this.mediainfo ? this.mediainfo.name : "";
  macros["{mediainfo.duration}"] = this.mediainfo ? this.mediainfo.duration : "";
  macros["{player.duration}"] = this.duration();
  macros["{player.pageUrl}"] = video_es_default.dom.isInFrame() ? import_document.default.referrer : import_window.default.location.href;
  macros["{playlistinfo.id}"] = this.playlistinfo ? this.playlistinfo.id : "";
  macros["{playlistinfo.name}"] = this.playlistinfo ? this.playlistinfo.name : "";
  macros["{timestamp}"] = new Date().getTime();
  macros["{document.referrer}"] = import_document.default.referrer;
  macros["{window.location.href}"] = import_window.default.location.href;
  macros["{random}"] = Math.floor(Math.random() * 1e12);
  ["description", "tags", "reference_id", "ad_keys"].forEach(function(prop) {
    if (_this.mediainfo && _this.mediainfo[prop]) {
      macros["{mediainfo." + prop + "}"] = _this.mediainfo[prop];
    } else if (defaults2["{mediainfo." + prop + "}"]) {
      macros["{mediainfo." + prop + "}"] = defaults2["{mediainfo." + prop + "}"];
    } else {
      macros["{mediainfo." + prop + "}"] = "";
    }
  });
  customFields(this.mediainfo, macros, "custom_fields");
  customFields(this.mediainfo, macros, "customFields");
  Object.keys(tcData).forEach(function(key) {
    macros["{tcf." + key + "}"] = tcData[key];
  });
  macros["{tcf.gdprAppliesInt}"] = tcData.gdprApplies ? 1 : 0;
  for (var i in macros) {
    string = string.split(i).join(uriEncodeIfNeeded(macros[i], uriEncode));
  }
  string = string.replace(/{pageVariable\.([^}]+)}/g, function(match, name) {
    var value;
    var context = import_window.default;
    var names = name.split(".");
    for (var _i = 0; _i < names.length; _i++) {
      if (_i === names.length - 1) {
        value = context[names[_i]];
      } else {
        context = context[names[_i]];
      }
    }
    var type = typeof value;
    if (value === null) {
      return "null";
    } else if (value === void 0) {
      if (defaults2["{pageVariable." + name + "}"]) {
        return defaults2["{pageVariable." + name + "}"];
      }
      video_es_default.log.warn('Page variable "' + name + '" not found');
      return "";
    } else if (type !== "string" && type !== "number" && type !== "boolean") {
      video_es_default.log.warn('Page variable "' + name + '" is not a supported type');
      return "";
    }
    return uriEncodeIfNeeded(String(value), uriEncode);
  });
  for (var defaultVal in defaults2) {
    string = string.replace(defaultVal, defaults2[defaultVal]);
  }
  return string;
}
var cueTextTracks = {};
cueTextTracks.processMetadataTracks = function(player, processMetadataTrack) {
  var tracks = player.textTracks();
  var setModeAndProcess = function setModeAndProcess2(track) {
    if (track.kind === "metadata") {
      player.ads.cueTextTracks.setMetadataTrackMode(track);
      processMetadataTrack(player, track);
    }
  };
  for (var i = 0; i < tracks.length; i++) {
    setModeAndProcess(tracks[i]);
  }
  tracks.addEventListener("addtrack", function(event) {
    setModeAndProcess(event.track);
  });
};
cueTextTracks.setMetadataTrackMode = function(track) {
  return;
};
cueTextTracks.getSupportedAdCue = function(player, cue) {
  return cue;
};
cueTextTracks.isSupportedAdCue = function(player, cue) {
  return true;
};
cueTextTracks.getCueId = function(player, cue) {
  return cue.id;
};
var cueAlreadySeen = function cueAlreadySeen2(player, cueId) {
  return cueId !== void 0 && player.ads.includedCues[cueId];
};
var setCueAlreadySeen = function setCueAlreadySeen2(player, cueId) {
  if (cueId !== void 0 && cueId !== "") {
    player.ads.includedCues[cueId] = true;
  }
};
cueTextTracks.processAdTrack = function(player, cues, processCue, cancelAdsHandler) {
  player.ads.includedCues = {};
  for (var i = 0; i < cues.length; i++) {
    var cue = cues[i];
    var cueData = this.getSupportedAdCue(player, cue);
    if (!this.isSupportedAdCue(player, cue)) {
      video_es_default.log.warn("Skipping as this is not a supported ad cue.", cue);
      return;
    }
    var cueId = this.getCueId(player, cue);
    var startTime = cue.startTime;
    if (cueAlreadySeen(player, cueId)) {
      video_es_default.log("Skipping ad already seen with ID " + cueId);
      return;
    }
    if (cancelAdsHandler) {
      cancelAdsHandler(player, cueData, cueId, startTime);
    }
    processCue(player, cueData, cueId, startTime);
    setCueAlreadySeen(player, cueId);
  }
};
function initCancelContentPlay(player, debug) {
  if (debug) {
    video_es_default.log("Using cancelContentPlay to block content playback");
  }
  player.on("play", cancelContentPlay);
}
function cancelContentPlay() {
  if (this.ads._shouldBlockPlay === false) {
    return;
  }
  if (!this.paused()) {
    this.ads.debug("Playback was canceled by cancelContentPlay");
    this.pause();
  }
  this.ads._cancelledPlay = true;
}
var obj = {};
var videojsReference = video_es_default;
obj.isMiddlewareMediatorSupported = function() {
  if (videojsReference.browser.IS_IOS || videojsReference.browser.IS_ANDROID) {
    return false;
  } else if (videojsReference.use && videojsReference.middleware && videojsReference.middleware.TERMINATOR) {
    return true;
  }
  return false;
};
obj.playMiddleware = function(player) {
  return {
    setSource: function setSource(srcObj, next) {
      next(null, srcObj);
    },
    callPlay: function callPlay() {
      if (player.ads && player.ads._shouldBlockPlay === true) {
        player.ads.debug("Using playMiddleware to block content playback");
        player.ads._playBlocked = true;
        return videojsReference.middleware.TERMINATOR;
      }
    },
    play: function play(terminated, playPromise) {
      if (player.ads && player.ads._playBlocked && terminated) {
        player.ads.debug("Play call to Tech was terminated.");
        player.trigger("play");
        player.addClass("vjs-has-started");
        player.ads._playBlocked = false;
      } else if (playPromise && playPromise.catch) {
        playPromise.catch(function(e) {
          if (e.name === "NotAllowedError" && !video_es_default.browser.IS_SAFARI) {
            player.trigger("pause");
          }
        });
      }
    }
  };
};
obj.testHook = function(testVjs) {
  videojsReference = testVjs;
};
var playMiddleware = obj.playMiddleware;
var isMiddlewareMediatorSupported = obj.isMiddlewareMediatorSupported;
var hasAdsPlugin = function hasAdsPlugin2() {
  if (video_es_default.getPlugin) {
    return Boolean(video_es_default.getPlugin("ads"));
  }
  var Player = video_es_default.getComponent("Player");
  return Boolean(Player && Player.prototype.ads);
};
function register(contribAdsPlugin3) {
  if (hasAdsPlugin(video_es_default)) {
    return false;
  }
  var registerPlugin = video_es_default.registerPlugin || video_es_default.plugin;
  registerPlugin("ads", contribAdsPlugin3);
  if (isMiddlewareMediatorSupported() && !video_es_default.usingContribAdsMiddleware_) {
    video_es_default.use("*", playMiddleware);
    video_es_default.usingContribAdsMiddleware_ = true;
    video_es_default.log.debug("Play middleware has been registered with videojs");
  }
  return true;
}
var States = function() {
  function States2() {
  }
  States2.getState = function getState(name) {
    if (!name) {
      return;
    }
    if (States2.states_ && States2.states_[name]) {
      return States2.states_[name];
    }
  };
  States2.registerState = function registerState(name, StateToRegister) {
    if (typeof name !== "string" || !name) {
      throw new Error('Illegal state name, "' + name + '"; must be a non-empty string.');
    }
    if (!States2.states_) {
      States2.states_ = {};
    }
    States2.states_[name] = StateToRegister;
    return StateToRegister;
  };
  return States2;
}();
var State = function() {
  State2._getName = function _getName() {
    return "Anonymous State";
  };
  function State2(player) {
    this.player = player;
  }
  var _proto = State2.prototype;
  _proto.transitionTo = function transitionTo(NewState) {
    var player = this.player;
    this.cleanup(player);
    var newState = new NewState(player);
    player.ads._state = newState;
    player.ads.debug(this.constructor._getName() + " -> " + newState.constructor._getName());
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    newState.init.apply(newState, [player].concat(args));
  };
  _proto.init = function init() {
  };
  _proto.cleanup = function cleanup() {
  };
  _proto.onPlay = function onPlay() {
  };
  _proto.onPlaying = function onPlaying() {
  };
  _proto.onEnded = function onEnded() {
  };
  _proto.onAdEnded = function onAdEnded() {
  };
  _proto.onAdsReady = function onAdsReady() {
    video_es_default.log.warn("Unexpected adsready event");
  };
  _proto.onAdsError = function onAdsError() {
  };
  _proto.onAdsCanceled = function onAdsCanceled() {
  };
  _proto.onAdTimeout = function onAdTimeout() {
  };
  _proto.onAdStarted = function onAdStarted() {
  };
  _proto.onContentChanged = function onContentChanged() {
  };
  _proto.onContentResumed = function onContentResumed() {
  };
  _proto.onReadyForPostroll = function onReadyForPostroll() {
    video_es_default.log.warn("Unexpected readyforpostroll event");
  };
  _proto.onNoPreroll = function onNoPreroll() {
  };
  _proto.onNoPostroll = function onNoPostroll() {
  };
  _proto.startLinearAdMode = function startLinearAdMode() {
    video_es_default.log.warn("Unexpected startLinearAdMode invocation (State via " + this.constructor._getName() + ")");
  };
  _proto.endLinearAdMode = function endLinearAdMode() {
    video_es_default.log.warn("Unexpected endLinearAdMode invocation (State via " + this.constructor._getName() + ")");
  };
  _proto.skipLinearAdMode = function skipLinearAdMode() {
    video_es_default.log.warn("Unexpected skipLinearAdMode invocation (State via " + this.constructor._getName() + ")");
  };
  _proto.isAdState = function isAdState() {
    throw new Error("isAdState unimplemented for " + this.constructor._getName());
  };
  _proto.isWaitingForAdBreak = function isWaitingForAdBreak() {
    return false;
  };
  _proto.isContentResuming = function isContentResuming() {
    return false;
  };
  _proto.inAdBreak = function inAdBreak() {
    return false;
  };
  _proto.handleEvent = function handleEvent(type) {
    var player = this.player;
    if (type === "play") {
      this.onPlay(player);
    } else if (type === "adsready") {
      this.onAdsReady(player);
    } else if (type === "adserror") {
      this.onAdsError(player);
    } else if (type === "adscanceled") {
      this.onAdsCanceled(player);
    } else if (type === "adtimeout") {
      this.onAdTimeout(player);
    } else if (type === "ads-ad-started") {
      this.onAdStarted(player);
    } else if (type === "contentchanged") {
      this.onContentChanged(player);
    } else if (type === "contentresumed") {
      this.onContentResumed(player);
    } else if (type === "readyforpostroll") {
      this.onReadyForPostroll(player);
    } else if (type === "playing") {
      this.onPlaying(player);
    } else if (type === "ended") {
      this.onEnded(player);
    } else if (type === "nopreroll") {
      this.onNoPreroll(player);
    } else if (type === "nopostroll") {
      this.onNoPostroll(player);
    } else if (type === "adended") {
      this.onAdEnded(player);
    }
  };
  return State2;
}();
States.registerState("State", State);
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var AdState = function(_State) {
  _inheritsLoose(AdState2, _State);
  function AdState2(player) {
    var _this;
    _this = _State.call(this, player) || this;
    _this.contentResuming = false;
    _this.waitingForAdBreak = false;
    return _this;
  }
  var _proto = AdState2.prototype;
  _proto.isAdState = function isAdState() {
    return true;
  };
  _proto.onPlaying = function onPlaying() {
    var ContentPlayback2 = States.getState("ContentPlayback");
    if (this.contentResuming) {
      this.transitionTo(ContentPlayback2);
    }
  };
  _proto.onContentResumed = function onContentResumed() {
    var ContentPlayback2 = States.getState("ContentPlayback");
    if (this.contentResuming) {
      this.transitionTo(ContentPlayback2);
    }
  };
  _proto.isWaitingForAdBreak = function isWaitingForAdBreak() {
    return this.waitingForAdBreak;
  };
  _proto.isContentResuming = function isContentResuming() {
    return this.contentResuming;
  };
  _proto.inAdBreak = function inAdBreak() {
    return this.player.ads._inLinearAdMode === true;
  };
  return AdState2;
}(State);
States.registerState("AdState", AdState);
var ContentState = function(_State) {
  _inheritsLoose(ContentState2, _State);
  function ContentState2() {
    return _State.apply(this, arguments) || this;
  }
  var _proto = ContentState2.prototype;
  _proto.isAdState = function isAdState() {
    return false;
  };
  _proto.onContentChanged = function onContentChanged(player) {
    var BeforePreroll2 = States.getState("BeforePreroll");
    var Preroll2 = States.getState("Preroll");
    player.ads.debug("Received contentchanged event (ContentState)");
    if (player.paused()) {
      this.transitionTo(BeforePreroll2);
    } else {
      this.transitionTo(Preroll2, false);
      player.pause();
      player.ads._pausedOnContentupdate = true;
    }
  };
  return ContentState2;
}(State);
States.registerState("ContentState", ContentState);
var ContentState$1 = States.getState("ContentState");
var AdsDone = function(_ContentState) {
  _inheritsLoose(AdsDone2, _ContentState);
  function AdsDone2() {
    return _ContentState.apply(this, arguments) || this;
  }
  AdsDone2._getName = function _getName() {
    return "AdsDone";
  };
  var _proto = AdsDone2.prototype;
  _proto.init = function init(player) {
    player.ads._contentHasEnded = true;
    player.trigger("ended");
  };
  _proto.startLinearAdMode = function startLinearAdMode() {
    video_es_default.log.warn("Unexpected startLinearAdMode invocation (AdsDone)");
  };
  return AdsDone2;
}(ContentState$1);
States.registerState("AdsDone", AdsDone);
var tryToResumeTimeout_;
function getPlayerSnapshot(player) {
  var currentTime;
  if (video_es_default.browser.IS_IOS && player.ads.isLive(player)) {
    if (player.seekable().length > 0) {
      currentTime = player.currentTime() - player.seekable().end(0);
    } else {
      currentTime = player.currentTime();
    }
  } else {
    currentTime = player.currentTime();
  }
  var tech = player.$(".vjs-tech");
  var tracks = player.textTracks ? player.textTracks() : [];
  var suppressedTracks = [];
  var snapshotObject = {
    ended: player.ended(),
    currentSrc: player.currentSrc(),
    sources: player.currentSources(),
    src: player.tech_.src(),
    currentTime,
    type: player.currentType()
  };
  if (tech) {
    snapshotObject.style = tech.getAttribute("style");
  }
  for (var i = 0; i < tracks.length; i++) {
    var track = tracks[i];
    suppressedTracks.push({
      track,
      mode: track.mode
    });
    track.mode = "disabled";
  }
  snapshotObject.suppressedTracks = suppressedTracks;
  return snapshotObject;
}
function restorePlayerSnapshot(player, callback) {
  var snapshotObject = player.ads.snapshot;
  if (callback === void 0) {
    callback = function callback2() {
    };
  }
  if (player.ads.disableNextSnapshotRestore === true) {
    player.ads.disableNextSnapshotRestore = false;
    delete player.ads.snapshot;
    callback();
    return;
  }
  var tech = player.$(".vjs-tech");
  var attempts = 20;
  var suppressedTracks = snapshotObject.suppressedTracks;
  var trackSnapshot;
  var restoreTracks = function restoreTracks2() {
    for (var i = 0; i < suppressedTracks.length; i++) {
      trackSnapshot = suppressedTracks[i];
      trackSnapshot.track.mode = trackSnapshot.mode;
    }
  };
  var resume = function resume2() {
    var currentTime;
    if (video_es_default.browser.IS_IOS && player.ads.isLive(player)) {
      if (snapshotObject.currentTime < 0) {
        if (player.seekable().length > 0) {
          currentTime = player.seekable().end(0) + snapshotObject.currentTime;
        } else {
          currentTime = player.currentTime();
        }
        player.currentTime(currentTime);
      }
      if (player.paused()) {
        var playPromise2 = player.play();
        if (playPromise2 && playPromise2.catch) {
          playPromise2.catch(function(error) {
            video_es_default.log.warn("Play promise rejected in IOS snapshot resume", error);
          });
        }
      }
    } else if (snapshotObject.ended) {
      player.currentTime(player.duration());
    } else {
      player.currentTime(snapshotObject.currentTime);
      var _playPromise = player.play();
      if (_playPromise && _playPromise.catch) {
        _playPromise.catch(function(error) {
          video_es_default.log.warn("Play promise rejected in snapshot resume", error);
        });
      }
    }
    if (player.ads.shouldRemoveAutoplay_) {
      player.autoplay(false);
      player.ads.shouldRemoveAutoplay_ = false;
    }
  };
  var tryToResume = function tryToResume2() {
    player.off("contentcanplay", tryToResume2);
    if (tryToResumeTimeout_) {
      player.clearTimeout(tryToResumeTimeout_);
    }
    tech = player.el().querySelector(".vjs-tech");
    if (tech.readyState > 1) {
      return resume();
    }
    if (tech.seekable === void 0) {
      return resume();
    }
    if (tech.seekable.length > 0) {
      return resume();
    }
    if (attempts--) {
      player.setTimeout(tryToResume2, 50);
    } else {
      try {
        resume();
      } catch (e) {
        video_es_default.log.warn("Failed to resume the content after an advertisement", e);
      }
    }
  };
  if ("style" in snapshotObject) {
    tech.setAttribute("style", snapshotObject.style || "");
  }
  if (player.ads.videoElementRecycled()) {
    player.one("resumeended", function() {
      delete player.ads.snapshot;
      callback();
    });
    player.one("contentloadedmetadata", restoreTracks);
    if (video_es_default.browser.IS_IOS && !player.autoplay()) {
      player.autoplay(true);
      player.ads.shouldRemoveAutoplay_ = true;
    }
    player.src(snapshotObject.sources);
    player.one("contentcanplay", tryToResume);
    tryToResumeTimeout_ = player.setTimeout(tryToResume, 2e3);
  } else {
    restoreTracks();
    if (!player.ended()) {
      var playPromise = player.play();
      if (playPromise && playPromise.catch) {
        playPromise.catch(function(error) {
          video_es_default.log.warn("Play promise rejected in snapshot restore", error);
        });
      }
    }
    delete player.ads.snapshot;
    callback();
  }
}
function start(player) {
  player.ads.debug("Starting ad break");
  player.ads._inLinearAdMode = true;
  player.trigger("adstart");
  if (player.ads.shouldTakeSnapshots()) {
    player.ads.snapshot = getPlayerSnapshot(player);
  }
  if (player.ads.shouldPlayContentBehindAd(player)) {
    player.ads.preAdVolume_ = player.volume();
    player.volume(0);
  }
  player.addClass("vjs-ad-playing");
  if (player.hasClass("vjs-live")) {
    player.removeClass("vjs-live");
  }
  player.ads.removeNativePoster();
}
function end(player, callback) {
  player.ads.debug("Ending ad break");
  if (callback === void 0) {
    callback = function callback2() {
    };
  }
  player.ads.adType = null;
  player.ads._inLinearAdMode = false;
  player.trigger("adend");
  player.removeClass("vjs-ad-playing");
  if (player.ads.isLive(player)) {
    player.addClass("vjs-live");
  }
  if (player.ads.shouldTakeSnapshots()) {
    restorePlayerSnapshot(player, callback);
  } else {
    player.volume(player.ads.preAdVolume_);
    callback();
  }
}
var obj$1 = {
  start,
  end
};
var AdState$1 = States.getState("AdState");
var Preroll = function(_AdState) {
  _inheritsLoose(Preroll2, _AdState);
  function Preroll2() {
    return _AdState.apply(this, arguments) || this;
  }
  Preroll2._getName = function _getName() {
    return "Preroll";
  };
  var _proto = Preroll2.prototype;
  _proto.init = function init(player, adsReady, shouldResumeToContent) {
    this.waitingForAdBreak = true;
    player.addClass("vjs-ad-loading");
    if (shouldResumeToContent || player.ads.nopreroll_) {
      return this.resumeAfterNoPreroll(player);
    }
    var timeout = player.ads.settings.timeout;
    if (typeof player.ads.settings.prerollTimeout === "number") {
      timeout = player.ads.settings.prerollTimeout;
    }
    this._timeout = player.setTimeout(function() {
      player.trigger("adtimeout");
    }, timeout);
    if (adsReady) {
      this.handleAdsReady();
    } else {
      this.adsReady = false;
    }
  };
  _proto.onAdsReady = function onAdsReady(player) {
    if (!player.ads.inAdBreak()) {
      player.ads.debug("Received adsready event (Preroll)");
      this.handleAdsReady();
    } else {
      video_es_default.log.warn("Unexpected adsready event (Preroll)");
    }
  };
  _proto.handleAdsReady = function handleAdsReady() {
    this.adsReady = true;
    this.readyForPreroll();
  };
  _proto.afterLoadStart = function afterLoadStart(callback) {
    var player = this.player;
    if (player.ads._hasThereBeenALoadStartDuringPlayerLife) {
      callback();
    } else {
      player.ads.debug("Waiting for loadstart...");
      player.one("loadstart", function() {
        player.ads.debug("Received loadstart event");
        callback();
      });
    }
  };
  _proto.noPreroll = function noPreroll() {
    var _this = this;
    this.afterLoadStart(function() {
      _this.player.ads.debug("Skipping prerolls due to nopreroll event (Preroll)");
      _this.resumeAfterNoPreroll(_this.player);
    });
  };
  _proto.readyForPreroll = function readyForPreroll() {
    var player = this.player;
    this.afterLoadStart(function() {
      player.ads.debug("Triggered readyforpreroll event (Preroll)");
      player.trigger("readyforpreroll");
    });
  };
  _proto.onAdsCanceled = function onAdsCanceled(player) {
    var _this2 = this;
    player.ads.debug("adscanceled (Preroll)");
    this.afterLoadStart(function() {
      _this2.resumeAfterNoPreroll(player);
    });
  };
  _proto.onAdsError = function onAdsError(player) {
    var _this3 = this;
    video_es_default.log("adserror (Preroll)");
    if (this.inAdBreak()) {
      player.ads.endLinearAdMode();
    } else {
      this.afterLoadStart(function() {
        _this3.resumeAfterNoPreroll(player);
      });
    }
  };
  _proto.startLinearAdMode = function startLinearAdMode() {
    var player = this.player;
    if (this.adsReady && !player.ads.inAdBreak() && !this.isContentResuming()) {
      this.clearTimeout(player);
      player.ads.adType = "preroll";
      this.waitingForAdBreak = false;
      obj$1.start(player);
      player.ads._shouldBlockPlay = false;
    } else {
      video_es_default.log.warn("Unexpected startLinearAdMode invocation (Preroll)");
    }
  };
  _proto.onAdStarted = function onAdStarted(player) {
    player.removeClass("vjs-ad-loading");
  };
  _proto.endLinearAdMode = function endLinearAdMode() {
    var player = this.player;
    if (this.inAdBreak()) {
      player.removeClass("vjs-ad-loading");
      player.addClass("vjs-ad-content-resuming");
      this.contentResuming = true;
      obj$1.end(player);
    }
  };
  _proto.skipLinearAdMode = function skipLinearAdMode() {
    var _this4 = this;
    var player = this.player;
    if (player.ads.inAdBreak() || this.isContentResuming()) {
      video_es_default.log.warn("Unexpected skipLinearAdMode invocation");
    } else {
      this.afterLoadStart(function() {
        player.trigger("adskip");
        player.ads.debug("skipLinearAdMode (Preroll)");
        _this4.resumeAfterNoPreroll(player);
      });
    }
  };
  _proto.onAdTimeout = function onAdTimeout(player) {
    var _this5 = this;
    this.afterLoadStart(function() {
      player.ads.debug("adtimeout (Preroll)");
      _this5.resumeAfterNoPreroll(player);
    });
  };
  _proto.onNoPreroll = function onNoPreroll(player) {
    if (player.ads.inAdBreak() || this.isContentResuming()) {
      video_es_default.log.warn("Unexpected nopreroll event (Preroll)");
    } else {
      this.noPreroll();
    }
  };
  _proto.resumeAfterNoPreroll = function resumeAfterNoPreroll(player) {
    this.contentResuming = true;
    player.ads._shouldBlockPlay = false;
    this.cleanupPartial(player);
    if (player.ads._playRequested || player.ads._pausedOnContentupdate) {
      if (player.paused()) {
        player.ads.debug("resumeAfterNoPreroll: attempting to resume playback (Preroll)");
        var playPromise = player.play();
        if (playPromise && playPromise.then) {
          playPromise.then(null, function(e) {
          });
        }
      } else {
        player.ads.debug("resumeAfterNoPreroll: already playing (Preroll)");
        player.trigger("play");
        player.trigger("playing");
      }
    }
  };
  _proto.cleanup = function cleanup(player) {
    if (!player.ads._hasThereBeenALoadStartDuringPlayerLife) {
      video_es_default.log.warn("Leaving Preroll state before loadstart event can cause issues.");
    }
    this.cleanupPartial(player);
  };
  _proto.cleanupPartial = function cleanupPartial(player) {
    player.removeClass("vjs-ad-loading");
    player.removeClass("vjs-ad-content-resuming");
    this.clearTimeout(player);
  };
  _proto.clearTimeout = function clearTimeout(player) {
    player.clearTimeout(this._timeout);
    this._timeout = null;
  };
  return Preroll2;
}(AdState$1);
States.registerState("Preroll", Preroll);
var ContentState$2 = States.getState("ContentState");
var BeforePreroll = function(_ContentState) {
  _inheritsLoose(BeforePreroll2, _ContentState);
  function BeforePreroll2() {
    return _ContentState.apply(this, arguments) || this;
  }
  BeforePreroll2._getName = function _getName() {
    return "BeforePreroll";
  };
  var _proto = BeforePreroll2.prototype;
  _proto.init = function init(player) {
    this.adsReady = false;
    this.shouldResumeToContent = false;
    player.ads._shouldBlockPlay = player.ads.settings.allowVjsAutoplay ? !player.autoplay() : true;
  };
  _proto.onAdsReady = function onAdsReady(player) {
    player.ads.debug("Received adsready event (BeforePreroll)");
    this.adsReady = true;
  };
  _proto.onPlay = function onPlay(player) {
    var Preroll2 = States.getState("Preroll");
    player.ads.debug("Received play event (BeforePreroll)");
    this.transitionTo(Preroll2, this.adsReady, this.shouldResumeToContent);
  };
  _proto.onAdsCanceled = function onAdsCanceled(player) {
    player.ads.debug("adscanceled (BeforePreroll)");
    this.shouldResumeToContent = true;
  };
  _proto.onAdsError = function onAdsError() {
    this.player.ads.debug("adserror (BeforePreroll)");
    this.shouldResumeToContent = true;
  };
  _proto.onNoPreroll = function onNoPreroll() {
    this.player.ads.debug("Skipping prerolls due to nopreroll event (BeforePreroll)");
    this.shouldResumeToContent = true;
  };
  _proto.skipLinearAdMode = function skipLinearAdMode() {
    var player = this.player;
    player.trigger("adskip");
    player.ads.debug("skipLinearAdMode (BeforePreroll)");
    this.shouldResumeToContent = true;
  };
  _proto.onContentChanged = function onContentChanged() {
    this.init(this.player);
  };
  return BeforePreroll2;
}(ContentState$2);
States.registerState("BeforePreroll", BeforePreroll);
var AdState$2 = States.getState("AdState");
var Midroll = function(_AdState) {
  _inheritsLoose(Midroll2, _AdState);
  function Midroll2() {
    return _AdState.apply(this, arguments) || this;
  }
  Midroll2._getName = function _getName() {
    return "Midroll";
  };
  var _proto = Midroll2.prototype;
  _proto.init = function init(player) {
    player.ads.adType = "midroll";
    obj$1.start(player);
    player.addClass("vjs-ad-loading");
  };
  _proto.onAdStarted = function onAdStarted(player) {
    player.removeClass("vjs-ad-loading");
  };
  _proto.endLinearAdMode = function endLinearAdMode() {
    var player = this.player;
    if (this.inAdBreak()) {
      this.contentResuming = true;
      player.addClass("vjs-ad-content-resuming");
      player.removeClass("vjs-ad-loading");
      obj$1.end(player);
    }
  };
  _proto.onAdsError = function onAdsError(player) {
    if (this.inAdBreak()) {
      player.ads.endLinearAdMode();
    }
  };
  _proto.cleanup = function cleanup(player) {
    player.removeClass("vjs-ad-loading");
    player.removeClass("vjs-ad-content-resuming");
  };
  return Midroll2;
}(AdState$2);
States.registerState("Midroll", Midroll);
var AdState$3 = States.getState("AdState");
var Postroll = function(_AdState) {
  _inheritsLoose(Postroll2, _AdState);
  function Postroll2() {
    return _AdState.apply(this, arguments) || this;
  }
  Postroll2._getName = function _getName() {
    return "Postroll";
  };
  var _proto = Postroll2.prototype;
  _proto.init = function init(player) {
    this.waitingForAdBreak = true;
    player.ads._contentEnding = true;
    if (!player.ads.nopostroll_) {
      player.addClass("vjs-ad-loading");
      var timeout = player.ads.settings.timeout;
      if (typeof player.ads.settings.postrollTimeout === "number") {
        timeout = player.ads.settings.postrollTimeout;
      }
      this._postrollTimeout = player.setTimeout(function() {
        player.trigger("adtimeout");
      }, timeout);
    } else {
      this.resumeContent(player);
      var AdsDone2 = States.getState("AdsDone");
      this.transitionTo(AdsDone2);
    }
  };
  _proto.startLinearAdMode = function startLinearAdMode() {
    var player = this.player;
    if (!player.ads.inAdBreak() && !this.isContentResuming()) {
      player.ads.adType = "postroll";
      player.clearTimeout(this._postrollTimeout);
      this.waitingForAdBreak = false;
      obj$1.start(player);
    } else {
      video_es_default.log.warn("Unexpected startLinearAdMode invocation (Postroll)");
    }
  };
  _proto.onAdStarted = function onAdStarted(player) {
    player.removeClass("vjs-ad-loading");
  };
  _proto.endLinearAdMode = function endLinearAdMode() {
    var _this = this;
    var player = this.player;
    var AdsDone2 = States.getState("AdsDone");
    if (this.inAdBreak()) {
      player.removeClass("vjs-ad-loading");
      this.resumeContent(player);
      obj$1.end(player, function() {
        _this.transitionTo(AdsDone2);
      });
    }
  };
  _proto.skipLinearAdMode = function skipLinearAdMode() {
    var player = this.player;
    if (player.ads.inAdBreak() || this.isContentResuming()) {
      video_es_default.log.warn("Unexpected skipLinearAdMode invocation");
    } else {
      player.ads.debug("Postroll abort (skipLinearAdMode)");
      player.trigger("adskip");
      this.abort(player);
    }
  };
  _proto.onAdTimeout = function onAdTimeout(player) {
    player.ads.debug("Postroll abort (adtimeout)");
    this.abort(player);
  };
  _proto.onAdsError = function onAdsError(player) {
    player.ads.debug("Postroll abort (adserror)");
    if (player.ads.inAdBreak()) {
      player.ads.endLinearAdMode();
    } else {
      this.abort(player);
    }
  };
  _proto.onContentChanged = function onContentChanged(player) {
    if (this.isContentResuming()) {
      var BeforePreroll2 = States.getState("BeforePreroll");
      this.transitionTo(BeforePreroll2);
    } else if (!this.inAdBreak()) {
      var Preroll2 = States.getState("Preroll");
      this.transitionTo(Preroll2);
    }
  };
  _proto.onNoPostroll = function onNoPostroll(player) {
    if (!this.isContentResuming() && !this.inAdBreak()) {
      this.abort(player);
    } else {
      video_es_default.log.warn("Unexpected nopostroll event (Postroll)");
    }
  };
  _proto.resumeContent = function resumeContent(player) {
    this.contentResuming = true;
    player.addClass("vjs-ad-content-resuming");
  };
  _proto.abort = function abort(player) {
    var AdsDone2 = States.getState("AdsDone");
    this.resumeContent(player);
    player.removeClass("vjs-ad-loading");
    this.transitionTo(AdsDone2);
  };
  _proto.cleanup = function cleanup(player) {
    player.removeClass("vjs-ad-content-resuming");
    player.clearTimeout(this._postrollTimeout);
    player.ads._contentEnding = false;
  };
  return Postroll2;
}(AdState$3);
States.registerState("Postroll", Postroll);
var ContentState$3 = States.getState("ContentState");
var ContentPlayback = function(_ContentState) {
  _inheritsLoose(ContentPlayback2, _ContentState);
  function ContentPlayback2() {
    return _ContentState.apply(this, arguments) || this;
  }
  ContentPlayback2._getName = function _getName() {
    return "ContentPlayback";
  };
  var _proto = ContentPlayback2.prototype;
  _proto.init = function init(player) {
    player.ads._shouldBlockPlay = false;
  };
  _proto.onAdsReady = function onAdsReady(player) {
    player.ads.debug("Received adsready event (ContentPlayback)");
    if (!player.ads.nopreroll_) {
      player.ads.debug("Triggered readyforpreroll event (ContentPlayback)");
      player.trigger("readyforpreroll");
    }
  };
  _proto.onReadyForPostroll = function onReadyForPostroll(player) {
    var Postroll2 = States.getState("Postroll");
    player.ads.debug("Received readyforpostroll event");
    this.transitionTo(Postroll2);
  };
  _proto.startLinearAdMode = function startLinearAdMode() {
    var Midroll2 = States.getState("Midroll");
    this.transitionTo(Midroll2);
  };
  return ContentPlayback2;
}(ContentState$3);
States.registerState("ContentPlayback", ContentPlayback);
var ContentState$4 = States.getState("ContentState");
var StitchedContentPlayback = function(_ContentState) {
  _inheritsLoose(StitchedContentPlayback2, _ContentState);
  function StitchedContentPlayback2() {
    return _ContentState.apply(this, arguments) || this;
  }
  StitchedContentPlayback2._getName = function _getName() {
    return "StitchedContentPlayback";
  };
  var _proto = StitchedContentPlayback2.prototype;
  _proto.init = function init() {
    this.player.ads._shouldBlockPlay = false;
  };
  _proto.onContentChanged = function onContentChanged() {
    this.player.ads.debug("Received contentchanged event (" + this.constructor._getName() + ")");
  };
  _proto.startLinearAdMode = function startLinearAdMode() {
    var StitchedAdRoll2 = States.getState("StitchedAdRoll");
    this.transitionTo(StitchedAdRoll2);
  };
  return StitchedContentPlayback2;
}(ContentState$4);
States.registerState("StitchedContentPlayback", StitchedContentPlayback);
var AdState$4 = States.getState("AdState");
var StitchedAdRoll = function(_AdState) {
  _inheritsLoose(StitchedAdRoll2, _AdState);
  function StitchedAdRoll2() {
    return _AdState.apply(this, arguments) || this;
  }
  StitchedAdRoll2._getName = function _getName() {
    return "StitchedAdRoll";
  };
  var _proto = StitchedAdRoll2.prototype;
  _proto.init = function init() {
    this.waitingForAdBreak = false;
    this.contentResuming = false;
    this.player.ads.adType = "stitched";
    obj$1.start(this.player);
  };
  _proto.onPlaying = function onPlaying() {
  };
  _proto.onContentResumed = function onContentResumed() {
  };
  _proto.onAdEnded = function onAdEnded() {
    this.endLinearAdMode();
    this.player.trigger("ended");
  };
  _proto.endLinearAdMode = function endLinearAdMode() {
    var StitchedContentPlayback2 = States.getState("StitchedContentPlayback");
    obj$1.end(this.player);
    this.transitionTo(StitchedContentPlayback2);
  };
  return StitchedAdRoll2;
}(AdState$4);
States.registerState("StitchedAdRoll", StitchedAdRoll);
var isMiddlewareMediatorSupported$1 = obj.isMiddlewareMediatorSupported;
var VIDEO_EVENTS = video_es_default.getTech("Html5").Events;
var defaults = {
  timeout: 5e3,
  prerollTimeout: void 0,
  postrollTimeout: void 0,
  debug: false,
  stitchedAds: false,
  contentIsLive: void 0,
  liveCuePoints: true,
  allowVjsAutoplay: video_es_default.options.normalizeAutoplay || false
};
var contribAdsPlugin = function contribAdsPlugin2(options) {
  var player = this;
  var settings = video_es_default.mergeOptions(defaults, options);
  var videoEvents = [];
  VIDEO_EVENTS.concat(["firstplay", "loadedalldata"]).forEach(function(eventName) {
    if (videoEvents.indexOf(eventName) === -1) {
      videoEvents.push(eventName);
    }
  });
  player.on(videoEvents, redispatch);
  if (!isMiddlewareMediatorSupported$1()) {
    initCancelContentPlay(player, settings.debug);
  }
  player.setTimeout(function() {
    if (!player.ads._hasThereBeenALoadStartDuringPlayerLife && player.src() !== "") {
      video_es_default.log.error("videojs-contrib-ads has not seen a loadstart event 5 seconds after being initialized, but a source is present. This indicates that videojs-contrib-ads was initialized too late. It must be initialized immediately after video.js in the same tick. As a result, some ads will not play and some media events will be incorrect. For more information, see http://videojs.github.io/videojs-contrib-ads/integrator/getting-started.html");
    }
  }, 5e3);
  player.on("ended", function() {
    if (!player.hasClass("vjs-has-started")) {
      player.addClass("vjs-has-started");
    }
  });
  player.on("contenttimeupdate", function() {
    player.removeClass("vjs-waiting");
  });
  player.on(["addurationchange", "adcanplay"], function() {
    if (player.ads.settings.stitchedAds) {
      return;
    }
    if (player.hasStarted()) {
      return;
    }
    if (player.ads.snapshot && player.currentSrc() === player.ads.snapshot.currentSrc) {
      return;
    }
    if (!player.ads.inAdBreak()) {
      return;
    }
    var playPromise = player.play();
    if (playPromise && playPromise.catch) {
      playPromise.catch(function(error) {
        video_es_default.log.warn("Play promise rejected when playing ad", error);
      });
    }
  });
  player.on("nopreroll", function() {
    player.ads.debug("Received nopreroll event");
    player.ads.nopreroll_ = true;
  });
  player.on("nopostroll", function() {
    player.ads.debug("Received nopostroll event");
    player.ads.nopostroll_ = true;
  });
  player.on("playing", function() {
    player.ads._cancelledPlay = false;
    player.ads._pausedOnContentupdate = false;
  });
  player.on("play", function() {
    player.ads._playRequested = true;
  });
  player.one("loadstart", function() {
    player.ads._hasThereBeenALoadStartDuringPlayerLife = true;
  });
  player.on("loadeddata", function() {
    player.ads._hasThereBeenALoadedData = true;
  });
  player.on("loadedmetadata", function() {
    player.ads._hasThereBeenALoadedMetaData = true;
  });
  player.ads = getAds(player);
  player.ads.settings = settings;
  settings.stitchedAds = !!settings.stitchedAds;
  if (settings.stitchedAds) {
    player.ads._state = new (States.getState("StitchedContentPlayback"))(player);
  } else {
    player.ads._state = new (States.getState("BeforePreroll"))(player);
  }
  player.ads._state.init(player);
  player.ads.cueTextTracks = cueTextTracks;
  player.ads.adMacroReplacement = adMacroReplacement.bind(player);
  initializeContentupdate(player);
  player.on("contentchanged", player.ads.reset);
  var shouldDisableTracks = function shouldDisableTracks2() {
    return !player.ads.shouldPlayContentBehindAd(player) && player.ads.inAdBreak() && player.tech_.featuresNativeTextTracks && video_es_default.browser.IS_IOS && !Array.isArray(player.textTracks());
  };
  var textTrackChangeHandler = function textTrackChangeHandler2() {
    var textTrackList = player.textTracks();
    if (shouldDisableTracks()) {
      for (var i = 0; i < textTrackList.length; i++) {
        var track = textTrackList[i];
        if (track.mode === "showing") {
          track.mode = "disabled";
        }
      }
    }
  };
  player.ready(function() {
    player.textTracks().addEventListener("change", textTrackChangeHandler);
  });
  player.on(["play", "playing", "ended", "adsready", "adscanceled", "adskip", "adserror", "adtimeout", "adended", "ads-ad-started", "contentchanged", "dispose", "contentresumed", "readyforpostroll", "nopreroll", "nopostroll"], function(e) {
    player.ads._state.handleEvent(e.type);
  });
  player.on("dispose", function() {
    player.ads.reset();
    player.textTracks().removeEventListener("change", textTrackChangeHandler);
  });
  listenToTcf();
  player.ads.listenToTcf = listenToTcf;
};
contribAdsPlugin.VERSION = version;
register(contribAdsPlugin);
var videojs_contrib_ads_es_default = contribAdsPlugin;

// dep:videojs-contrib-ads
var videojs_contrib_ads_default = videojs_contrib_ads_es_default;
export {
  videojs_contrib_ads_default as default
};
/*! @name videojs-contrib-ads @version 6.9.0 @license Apache-2.0 */
//# sourceMappingURL=videojs-contrib-ads.js.map
