{
  "version": 3,
  "sources": ["../../videojs-contrib-ads/dist/videojs-contrib-ads.es.js", "dep:videojs-contrib-ads"],
  "sourcesContent": ["/*! @name videojs-contrib-ads @version 6.9.0 @license Apache-2.0 */\nimport videojs from 'video.js';\nimport window from 'global/window';\nimport document from 'global/document';\n\nvar version = \"6.9.0\";\n\n/*\n * Implements the public API available in `player.ads` as well as application state.\n */\nfunction getAds(player) {\n  return {\n    disableNextSnapshotRestore: false,\n    // This is true if we have finished actual content playback but haven't\n    // dealt with postrolls and officially ended yet\n    _contentEnding: false,\n    // This is set to true if the content has officially ended at least once.\n    // After that, the user can seek backwards and replay content, but _contentHasEnded\n    // remains true.\n    _contentHasEnded: false,\n    // Tracks if loadstart has happened yet for the initial source. It is not reset\n    // on source changes because loadstart is the event that signals to the ad plugin\n    // that the source has changed. Therefore, no special signaling is needed to know\n    // that there has been one for subsequent sources.\n    _hasThereBeenALoadStartDuringPlayerLife: false,\n    // Tracks if loadeddata has happened yet for the current source.\n    _hasThereBeenALoadedData: false,\n    // Tracks if loadedmetadata has happened yet for the current source.\n    _hasThereBeenALoadedMetaData: false,\n    // Are we after startLinearAdMode and before endLinearAdMode?\n    _inLinearAdMode: false,\n    // Should we block calls to play on the content player?\n    _shouldBlockPlay: false,\n    // Was play blocked by the plugin's playMiddleware feature?\n    _playBlocked: false,\n    // Tracks whether play has been requested for this source,\n    // either by the play method or user interaction\n    _playRequested: false,\n    // This is an estimation of the current ad type being played\n    // This is experimental currently. Do not rely on its presence or behavior!\n    adType: null,\n    VERSION: version,\n    reset: function reset() {\n      player.ads.disableNextSnapshotRestore = false;\n      player.ads._contentEnding = false;\n      player.ads._contentHasEnded = false;\n      player.ads.snapshot = null;\n      player.ads.adType = null;\n      player.ads._hasThereBeenALoadedData = false;\n      player.ads._hasThereBeenALoadedMetaData = false;\n      player.ads._cancelledPlay = false;\n      player.ads._shouldBlockPlay = false;\n      player.ads._playBlocked = false;\n      player.ads.nopreroll_ = false;\n      player.ads.nopostroll_ = false;\n      player.ads._playRequested = false;\n    },\n    // Call this when an ad response has been received and there are\n    // linear ads ready to be played.\n    startLinearAdMode: function startLinearAdMode() {\n      player.ads._state.startLinearAdMode();\n    },\n    // Call this when a linear ad pod has finished playing.\n    endLinearAdMode: function endLinearAdMode() {\n      player.ads._state.endLinearAdMode();\n    },\n    // Call this when an ad response has been received but there are no\n    // linear ads to be played (i.e. no ads available, or overlays).\n    // This has no effect if we are already in an ad break.  Always\n    // use endLinearAdMode() to exit from linear ad-playback state.\n    skipLinearAdMode: function skipLinearAdMode() {\n      player.ads._state.skipLinearAdMode();\n    },\n    // With no arguments, returns a boolean value indicating whether or not\n    // contrib-ads is set to treat ads as stitched with content in a single\n    // stream. With arguments, treated as a setter, but this behavior is\n    // deprecated.\n    stitchedAds: function stitchedAds(arg) {\n      if (arg !== undefined) {\n        videojs.log.warn('Using player.ads.stitchedAds() as a setter is deprecated, ' + 'it should be set as an option upon initialization of contrib-ads.'); // Keep the private property and the settings in sync. When this\n        // setter is removed, we can probably stop using the private property.\n\n        this.settings.stitchedAds = !!arg;\n      }\n\n      return this.settings.stitchedAds;\n    },\n    // Returns whether the video element has been modified since the\n    // snapshot was taken.\n    // We test both src and currentSrc because changing the src attribute to a URL that\n    // AdBlocker is intercepting doesn't update currentSrc.\n    videoElementRecycled: function videoElementRecycled() {\n      if (player.ads.shouldPlayContentBehindAd(player)) {\n        return false;\n      }\n\n      if (!this.snapshot) {\n        throw new Error('You cannot use videoElementRecycled while there is no snapshot.');\n      }\n\n      var srcChanged = player.tech_.src() !== this.snapshot.src;\n      var currentSrcChanged = player.currentSrc() !== this.snapshot.currentSrc;\n      return srcChanged || currentSrcChanged;\n    },\n    // Returns a boolean indicating if given player is in live mode.\n    // One reason for this: https://github.com/videojs/video.js/issues/3262\n    // Also, some live content can have a duration.\n    isLive: function isLive(somePlayer) {\n      if (somePlayer === void 0) {\n        somePlayer = player;\n      }\n\n      if (typeof somePlayer.ads.settings.contentIsLive === 'boolean') {\n        return somePlayer.ads.settings.contentIsLive;\n      } else if (somePlayer.duration() === Infinity) {\n        return true;\n      } else if (videojs.browser.IOS_VERSION === '8' && somePlayer.duration() === 0) {\n        return true;\n      }\n\n      return false;\n    },\n    // Return true if content playback should mute and continue during ad breaks.\n    // This is only done during live streams on platforms where it's supported.\n    // This improves speed and accuracy when returning from an ad break.\n    shouldPlayContentBehindAd: function shouldPlayContentBehindAd(somePlayer) {\n      if (somePlayer === void 0) {\n        somePlayer = player;\n      }\n\n      if (!somePlayer) {\n        throw new Error('shouldPlayContentBehindAd requires a player as a param');\n      } else if (!somePlayer.ads.settings.liveCuePoints) {\n        return false;\n      } else {\n        return !videojs.browser.IS_IOS && !videojs.browser.IS_ANDROID && somePlayer.duration() === Infinity;\n      }\n    },\n    // Return true if the ads plugin should save and restore snapshots of the\n    // player state when moving into and out of ad mode.\n    shouldTakeSnapshots: function shouldTakeSnapshots(somePlayer) {\n      if (somePlayer === void 0) {\n        somePlayer = player;\n      }\n\n      return !this.shouldPlayContentBehindAd(somePlayer) && !this.stitchedAds();\n    },\n    // Returns true if player is in ad mode.\n    //\n    // Ad mode definition:\n    // If content playback is blocked by the ad plugin.\n    //\n    // Examples of ad mode:\n    //\n    // * Waiting to find out if an ad is going to play while content would normally be\n    //   playing.\n    // * Waiting for an ad to start playing while content would normally be playing.\n    // * An ad is playing (even if content is also playing)\n    // * An ad has completed and content is about to resume, but content has not resumed\n    //   yet.\n    //\n    // Examples of not ad mode:\n    //\n    // * Content playback has not been requested\n    // * Content playback is paused\n    // * An asynchronous ad request is ongoing while content is playing\n    // * A non-linear ad is active\n    isInAdMode: function isInAdMode() {\n      return this._state.isAdState();\n    },\n    // Returns true if in ad mode but an ad break hasn't started yet.\n    isWaitingForAdBreak: function isWaitingForAdBreak() {\n      return this._state.isWaitingForAdBreak();\n    },\n    // Returns true if content is resuming after an ad. This is part of ad mode.\n    isContentResuming: function isContentResuming() {\n      return this._state.isContentResuming();\n    },\n    // Deprecated because the name was misleading. Use inAdBreak instead.\n    isAdPlaying: function isAdPlaying() {\n      return this._state.inAdBreak();\n    },\n    // Returns true if an ad break is ongoing. This is part of ad mode.\n    // An ad break is the time between startLinearAdMode and endLinearAdMode.\n    inAdBreak: function inAdBreak() {\n      return this._state.inAdBreak();\n    },\n\n    /*\n     * Remove the poster attribute from the video element tech, if present. When\n     * reusing a video element for multiple videos, the poster image will briefly\n     * reappear while the new source loads. Removing the attribute ahead of time\n     * prevents the poster from showing up between videos.\n     *\n     * @param {Object} player The videojs player object\n     */\n    removeNativePoster: function removeNativePoster() {\n      var tech = player.$('.vjs-tech');\n\n      if (tech) {\n        tech.removeAttribute('poster');\n      }\n    },\n    debug: function debug() {\n      if (this.settings.debug) {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (args.length === 1 && typeof args[0] === 'string') {\n          videojs.log('ADS: ' + args[0]);\n        } else {\n          videojs.log.apply(videojs, ['ADS:'].concat(args));\n        }\n      }\n    }\n  };\n}\n\n/*\nThe goal of this feature is to make player events work as an integrator would\nexpect despite the presense of ads. For example, an integrator would expect\nan `ended` event to happen once the content is ended. If an `ended` event is sent\nas a result of a preroll ending, that is a bug. The `redispatch` method should recognize\nsuch `ended` events and prefix them so they are sent as `adended`, and so on with\nall other player events.\n*/\n// Cancel an event.\n// Video.js wraps native events. This technique stops propagation for the Video.js event\n// (AKA player event or wrapper event) while native events continue propagating.\nvar cancelEvent = function cancelEvent(player, event) {\n  event.isImmediatePropagationStopped = function () {\n    return true;\n  };\n\n  event.cancelBubble = true;\n\n  event.isPropagationStopped = function () {\n    return true;\n  };\n}; // Redispatch an event with a prefix.\n// Cancels the event, then sends a new event with the type of the original\n// event with the given prefix added.\n// The inclusion of the \"state\" property should be removed in a future\n// major version update with instructions to migrate any code that relies on it.\n// It is an implementation detail and relying on it creates fragility.\n\n\nvar prefixEvent = function prefixEvent(player, prefix, event) {\n  cancelEvent(player, event);\n  player.trigger({\n    type: prefix + event.type,\n    originalEvent: event\n  });\n}; // Playing event\n// Requirements:\n// * Normal playing event when there is no preroll\n// * No playing event before preroll\n// * At least one playing event after preroll\n\n\nvar handlePlaying = function handlePlaying(player, event) {\n  if (player.ads.isInAdMode()) {\n    if (player.ads.isContentResuming()) {\n      // Prefix playing event when switching back to content after postroll.\n      if (player.ads._contentEnding) {\n        prefixEvent(player, 'content', event);\n      } // Prefix all other playing events during ads.\n\n    } else {\n      prefixEvent(player, 'ad', event);\n    }\n  }\n}; // Ended event\n// Requirements:\n// * A single ended event when there is no postroll\n// * No ended event before postroll\n// * A single ended event after postroll\n\n\nvar handleEnded = function handleEnded(player, event) {\n  if (player.ads.isInAdMode()) {\n    // Cancel ended events during content resuming. Normally we would\n    // prefix them, but `contentended` has a special meaning. In the\n    // future we'd like to rename the existing `contentended` to\n    // `readyforpostroll`, then we could remove the special `resumeended`\n    // and do a conventional content prefix here.\n    if (player.ads.isContentResuming()) {\n      cancelEvent(player, event); // Important: do not use this event outside of videojs-contrib-ads.\n      // It will be removed and your code will break.\n      // Ideally this would simply be `contentended`, but until\n      // `contentended` no longer has a special meaning it cannot be\n      // changed.\n\n      player.trigger('resumeended'); // Ad prefix in ad mode\n    } else {\n      prefixEvent(player, 'ad', event);\n    } // Prefix ended due to content ending before postroll check\n\n  } else if (!player.ads._contentHasEnded && !player.ads.stitchedAds()) {\n    // This will change to cancelEvent after the contentended deprecation\n    // period (contrib-ads 7)\n    prefixEvent(player, 'content', event); // Content ended for the first time, time to check for postrolls\n\n    player.trigger('readyforpostroll');\n  }\n}; // handleLoadEvent is used for loadstart, loadeddata, and loadedmetadata\n// Requirements:\n// * Initial event is not prefixed\n// * Event due to ad loading is prefixed\n// * Event due to content source change is not prefixed\n// * Event due to content resuming is prefixed\n\n\nvar handleLoadEvent = function handleLoadEvent(player, event) {\n  // Initial event\n  if (event.type === 'loadstart' && !player.ads._hasThereBeenALoadStartDuringPlayerLife || event.type === 'loadeddata' && !player.ads._hasThereBeenALoadedData || event.type === 'loadedmetadata' && !player.ads._hasThereBeenALoadedMetaData) {\n    return; // Ad playing\n  } else if (player.ads.inAdBreak()) {\n    prefixEvent(player, 'ad', event); // Source change\n  } else if (player.currentSrc() !== player.ads.contentSrc) {\n    return; // Content resuming\n  } else {\n    prefixEvent(player, 'content', event);\n  }\n}; // Play event\n// Requirements:\n// * Play events have the \"ad\" prefix when an ad is playing\n// * Play events have the \"content\" prefix when content is resuming\n// Play requests are unique because they represent user intention to play. They happen\n// because the user clicked play, or someone called player.play(), etc. It could happen\n// multiple times during ad loading, regardless of where we are in the process. With our\n// current architecture, this could cause the content to start playing.\n// Therefore, contrib-ads must always either:\n//   - cancelContentPlay if there is any possible chance the play caused the\n//     content to start playing, even if we are technically in ad mode. In order for\n//     that to happen, play events need to be unprefixed until the last possible moment.\n//   - use playMiddleware to stop the play from reaching the Tech so there is no risk\n//     of the content starting to play.\n// Currently, playMiddleware is only supported on desktop browsers with\n// video.js after version 6.7.1.\n\n\nvar handlePlay = function handlePlay(player, event) {\n  if (player.ads.inAdBreak()) {\n    prefixEvent(player, 'ad', event); // Content resuming\n  } else if (player.ads.isContentResuming()) {\n    prefixEvent(player, 'content', event);\n  }\n}; // Handle a player event, either by redispatching it with a prefix, or by\n// letting it go on its way without any meddling.\n\n\nfunction redispatch(event) {\n  // Events with special treatment\n  if (event.type === 'playing') {\n    handlePlaying(this, event);\n  } else if (event.type === 'ended') {\n    handleEnded(this, event);\n  } else if (event.type === 'loadstart' || event.type === 'loadeddata' || event.type === 'loadedmetadata') {\n    handleLoadEvent(this, event);\n  } else if (event.type === 'play') {\n    handlePlay(this, event); // Standard handling for all other events\n  } else if (this.ads.isInAdMode()) {\n    if (this.ads.isContentResuming()) {\n      // Event came from snapshot restore after an ad, use \"content\" prefix\n      prefixEvent(this, 'content', event);\n    } else {\n      // Event came from ad playback, use \"ad\" prefix\n      prefixEvent(this, 'ad', event);\n    }\n  }\n}\n\n/*\nThis feature sends a `contentupdate` event when the player source changes.\n*/\n// Start sending contentupdate events\nfunction initializeContentupdate(player) {\n  // Keep track of the current content source\n  // If you want to change the src of the video without triggering\n  // the ad workflow to restart, you can update this variable before\n  // modifying the player's source\n  player.ads.contentSrc = player.currentSrc();\n  player.ads._seenInitialLoadstart = false; // Check if a new src has been set, if so, trigger contentupdate\n\n  var checkSrc = function checkSrc() {\n    if (!player.ads.inAdBreak()) {\n      var src = player.currentSrc();\n\n      if (src !== player.ads.contentSrc) {\n        if (player.ads._seenInitialLoadstart) {\n          player.trigger({\n            type: 'contentchanged'\n          });\n        }\n\n        player.trigger({\n          type: 'contentupdate',\n          oldValue: player.ads.contentSrc,\n          newValue: src\n        });\n        player.ads.contentSrc = src;\n      }\n\n      player.ads._seenInitialLoadstart = true;\n    }\n  }; // loadstart reliably indicates a new src has been set\n\n\n  player.on('loadstart', checkSrc);\n}\n\n/**\n * Current tcfData returned from CMP\n * Updated on event listener rather than having to make an asyc\n * check within the macro resolver\n */\n\nvar tcData = {};\n/**\n * Sets up a proxy for the TCF API in an iframed player, if a parent frame\n * that has implemented the TCF API is detected\n * https://github.com/InteractiveAdvertisingBureau/GDPR-Transparency-and-Consent-Framework/blob/master/TCFv2/IAB%20Tech%20Lab%20-%20CMP%20API%20v2.md#is-there-a-sample-iframe-script-call-to-the-cmp-api\n */\n\nvar proxyTcfApi = function proxyTcfApi(_) {\n  if (videojs.dom.isInFrame() && typeof window.__tcfapi !== 'function') {\n    var frame = window;\n    var cmpFrame;\n    var cmpCallbacks = {};\n\n    while (frame) {\n      try {\n        if (frame.frames.__tcfapiLocator) {\n          cmpFrame = frame;\n          break;\n        }\n      } catch (ignore) {// empty\n      }\n\n      if (frame === window.top) {\n        break;\n      }\n\n      frame = frame.parent;\n    }\n\n    if (!cmpFrame) {\n      return;\n    }\n\n    window.__tcfapi = function (cmd, version, callback, arg) {\n      var callId = Math.random() + '';\n      var msg = {\n        __tcfapiCall: {\n          command: cmd,\n          parameter: arg,\n          version: version,\n          callId: callId\n        }\n      };\n      cmpCallbacks[callId] = callback;\n      cmpFrame.postMessage(msg, '*');\n    };\n\n    window.addEventListener('message', function (event) {\n      var json = {};\n\n      try {\n        json = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\n      } catch (ignore) {// empty\n      }\n\n      var payload = json.__tcfapiReturn;\n\n      if (payload) {\n        if (typeof cmpCallbacks[payload.callId] === 'function') {\n          cmpCallbacks[payload.callId](payload.returnValue, payload.success);\n          cmpCallbacks[payload.callId] = null;\n        }\n      }\n    }, false);\n  }\n};\n/**\n * Sets up event listener for changes to consent data.\n */\n\n\nvar listenToTcf = function listenToTcf() {\n  proxyTcfApi();\n\n  if (typeof window.__tcfapi === 'function') {\n    window.__tcfapi('addEventListener', 2, function (data, success) {\n      if (success) {\n        tcData = data;\n      }\n    });\n  }\n};\n\n/*\nThis feature provides an optional method for ad plugins to insert run-time values\ninto an ad server URL or configuration.\n*/\n\nvar uriEncodeIfNeeded = function uriEncodeIfNeeded(value, uriEncode) {\n  if (uriEncode) {\n    return encodeURIComponent(value);\n  }\n\n  return value;\n}; // Add custom field macros to macros object\n// based on given name for custom fields property of mediainfo object.\n\n\nvar customFields = function customFields(mediainfo, macros, customFieldsName) {\n  if (mediainfo && mediainfo[customFieldsName]) {\n    var fields = mediainfo[customFieldsName];\n    var fieldNames = Object.keys(fields);\n\n    for (var i = 0; i < fieldNames.length; i++) {\n      var tag = '{mediainfo.' + customFieldsName + '.' + fieldNames[i] + '}';\n      macros[tag] = fields[fieldNames[i]];\n    }\n  }\n}; // Public method that ad plugins use for ad macros.\n// \"string\" is any string with macros to be replaced\n// \"uriEncode\" if true will uri encode macro values when replaced\n// \"customMacros\" is a object with custom macros and values to map them to\n//  - For example: {'{five}': 5}\n// Return value is is \"string\" with macros replaced\n//  - For example: adMacroReplacement('{player.id}') returns a string of the player id\n\n\nfunction adMacroReplacement(string, uriEncode, customMacros) {\n  var _this = this;\n\n  var defaults = {}; // Get macros with defaults e.g. {x=y}, store values and replace with standard macros\n\n  string = string.replace(/{([^}=]+)=([^}]+)}/g, function (match, name, defaultVal) {\n    defaults[\"{\" + name + \"}\"] = defaultVal;\n    return \"{\" + name + \"}\";\n  });\n\n  if (uriEncode === undefined) {\n    uriEncode = false;\n  }\n\n  var macros = {};\n\n  if (customMacros !== undefined) {\n    macros = customMacros;\n  } // Static macros\n\n\n  macros['{player.id}'] = this.options_['data-player'] || this.id_;\n  macros['{player.height}'] = this.currentHeight();\n  macros['{player.width}'] = this.currentWidth();\n  macros['{mediainfo.id}'] = this.mediainfo ? this.mediainfo.id : '';\n  macros['{mediainfo.name}'] = this.mediainfo ? this.mediainfo.name : '';\n  macros['{mediainfo.duration}'] = this.mediainfo ? this.mediainfo.duration : '';\n  macros['{player.duration}'] = this.duration();\n  macros['{player.pageUrl}'] = videojs.dom.isInFrame() ? document.referrer : window.location.href;\n  macros['{playlistinfo.id}'] = this.playlistinfo ? this.playlistinfo.id : '';\n  macros['{playlistinfo.name}'] = this.playlistinfo ? this.playlistinfo.name : '';\n  macros['{timestamp}'] = new Date().getTime();\n  macros['{document.referrer}'] = document.referrer;\n  macros['{window.location.href}'] = window.location.href;\n  macros['{random}'] = Math.floor(Math.random() * 1000000000000);\n  ['description', 'tags', 'reference_id', 'ad_keys'].forEach(function (prop) {\n    if (_this.mediainfo && _this.mediainfo[prop]) {\n      macros[\"{mediainfo.\" + prop + \"}\"] = _this.mediainfo[prop];\n    } else if (defaults[\"{mediainfo.\" + prop + \"}\"]) {\n      macros[\"{mediainfo.\" + prop + \"}\"] = defaults[\"{mediainfo.\" + prop + \"}\"];\n    } else {\n      macros[\"{mediainfo.\" + prop + \"}\"] = '';\n    }\n  }); // Custom fields in mediainfo\n\n  customFields(this.mediainfo, macros, 'custom_fields');\n  customFields(this.mediainfo, macros, 'customFields'); // tcf macros\n\n  Object.keys(tcData).forEach(function (key) {\n    macros[\"{tcf.\" + key + \"}\"] = tcData[key];\n  }); // Ad servers commonly want this bool as an int\n\n  macros['{tcf.gdprAppliesInt}'] = tcData.gdprApplies ? 1 : 0; // Go through all the replacement macros and apply them to the string.\n  // This will replace all occurrences of the replacement macros.\n\n  for (var i in macros) {\n    string = string.split(i).join(uriEncodeIfNeeded(macros[i], uriEncode));\n  } // Page variables\n\n\n  string = string.replace(/{pageVariable\\.([^}]+)}/g, function (match, name) {\n    var value;\n    var context = window;\n    var names = name.split('.'); // Iterate down multiple levels of selector without using eval\n    // This makes things like pageVariable.foo.bar work\n\n    for (var _i = 0; _i < names.length; _i++) {\n      if (_i === names.length - 1) {\n        value = context[names[_i]];\n      } else {\n        context = context[names[_i]];\n      }\n    }\n\n    var type = typeof value; // Only allow certain types of values. Anything else is probably a mistake.\n\n    if (value === null) {\n      return 'null';\n    } else if (value === undefined) {\n      if (defaults[\"{pageVariable.\" + name + \"}\"]) {\n        return defaults[\"{pageVariable.\" + name + \"}\"];\n      }\n\n      videojs.log.warn(\"Page variable \\\"\" + name + \"\\\" not found\");\n      return '';\n    } else if (type !== 'string' && type !== 'number' && type !== 'boolean') {\n      videojs.log.warn(\"Page variable \\\"\" + name + \"\\\" is not a supported type\");\n      return '';\n    }\n\n    return uriEncodeIfNeeded(String(value), uriEncode);\n  }); // Replace defaults\n\n  for (var defaultVal in defaults) {\n    string = string.replace(defaultVal, defaults[defaultVal]);\n  }\n\n  return string;\n}\n\n/*\n* This feature allows metadata text tracks to be manipulated once available\n* @see processMetadataTracks.\n* It also allows ad implementations to leverage ad cues coming through\n* text tracks, @see processAdTrack\n**/\nvar cueTextTracks = {};\n/*\n* This feature allows metadata text tracks to be manipulated once they are available,\n* usually after the 'loadstart' event is observed on the player\n* @param player A reference to a player\n* @param processMetadataTrack A callback that performs some operations on a\n* metadata text track\n**/\n\ncueTextTracks.processMetadataTracks = function (player, processMetadataTrack) {\n  var tracks = player.textTracks();\n\n  var setModeAndProcess = function setModeAndProcess(track) {\n    if (track.kind === 'metadata') {\n      player.ads.cueTextTracks.setMetadataTrackMode(track);\n      processMetadataTrack(player, track);\n    }\n  }; // Text tracks are available\n\n\n  for (var i = 0; i < tracks.length; i++) {\n    setModeAndProcess(tracks[i]);\n  } // Wait until text tracks are added\n\n\n  tracks.addEventListener('addtrack', function (event) {\n    setModeAndProcess(event.track);\n  });\n};\n/*\n* Sets the track mode to one of 'disabled', 'hidden' or 'showing'\n* @see https://github.com/videojs/video.js/blob/master/docs/guides/text-tracks.md\n* Default behavior is to do nothing, @override if this is not desired\n* @param track The text track to set the mode on\n*/\n\n\ncueTextTracks.setMetadataTrackMode = function (track) {\n  return;\n};\n/*\n* Determines whether cue is an ad cue and returns the cue data.\n* @param player A reference to the player\n* @param cue The full cue object\n* Returns the given cue by default @override if futher processing is required\n* @return {Object} a useable ad cue or null if not supported\n**/\n\n\ncueTextTracks.getSupportedAdCue = function (player, cue) {\n  return cue;\n};\n/*\n* Defines whether a cue is supported or not, potentially\n* based on the player settings\n* @param player A reference to the player\n* @param cue The cue to be checked\n* Default behavior is to return true, @override if this is not desired\n* @return {Boolean}\n*/\n\n\ncueTextTracks.isSupportedAdCue = function (player, cue) {\n  return true;\n};\n/*\n* Gets the id associated with a cue.\n* @param cue The cue to extract an ID from\n* @returns The first occurance of 'id' in the object,\n* @override if this is not the desired cue id\n**/\n\n\ncueTextTracks.getCueId = function (player, cue) {\n  return cue.id;\n};\n/*\n* Checks whether a cue has already been used\n* @param cueId The Id associated with a cue\n**/\n\n\nvar cueAlreadySeen = function cueAlreadySeen(player, cueId) {\n  return cueId !== undefined && player.ads.includedCues[cueId];\n};\n/*\n* Indicates that a cue has been used\n* @param cueId The Id associated with a cue\n**/\n\n\nvar setCueAlreadySeen = function setCueAlreadySeen(player, cueId) {\n  if (cueId !== undefined && cueId !== '') {\n    player.ads.includedCues[cueId] = true;\n  }\n};\n/*\n* This feature allows ad metadata tracks to be manipulated in ad implementations\n* @param player A reference to the player\n* @param cues The set of cues to work with\n* @param processCue A method that uses a cue to make some\n* ad request in the ad implementation\n* @param [cancelAdsHandler] A method that dynamically cancels ads in the ad implementation\n**/\n\n\ncueTextTracks.processAdTrack = function (player, cues, processCue, cancelAdsHandler) {\n  player.ads.includedCues = {}; // loop over set of cues\n\n  for (var i = 0; i < cues.length; i++) {\n    var cue = cues[i];\n    var cueData = this.getSupportedAdCue(player, cue); // Exit if this is not a supported cue\n\n    if (!this.isSupportedAdCue(player, cue)) {\n      videojs.log.warn('Skipping as this is not a supported ad cue.', cue);\n      return;\n    } // Continue processing supported cue\n\n\n    var cueId = this.getCueId(player, cue);\n    var startTime = cue.startTime; // Skip ad if cue was already used\n\n    if (cueAlreadySeen(player, cueId)) {\n      videojs.log('Skipping ad already seen with ID ' + cueId);\n      return;\n    } // Optional dynamic ad cancellation\n\n\n    if (cancelAdsHandler) {\n      cancelAdsHandler(player, cueData, cueId, startTime);\n    } // Process cue as an ad cue\n\n\n    processCue(player, cueData, cueId, startTime); // Indicate that this cue has been used\n\n    setCueAlreadySeen(player, cueId);\n  }\n};\n\nfunction initCancelContentPlay(player, debug) {\n  if (debug) {\n    videojs.log('Using cancelContentPlay to block content playback');\n  } // Listen to play events to \"cancel\" them afterward\n\n\n  player.on('play', cancelContentPlay);\n}\n/*\nThis feature makes sure the player is paused during ad loading.\n\nIt does this by pausing the player immediately after a \"play\" where ads will be requested,\nthen signalling that we should play after the ad is done.\n*/\n\nfunction cancelContentPlay() {\n  // this function is in the player's context\n  if (this.ads._shouldBlockPlay === false) {\n    // Only block play if the ad plugin is in a state when content\n    // playback should be blocked. This currently means during\n    // BeforePrerollState and PrerollState.\n    return;\n  } // pause playback so ads can be handled.\n\n\n  if (!this.paused()) {\n    this.ads.debug('Playback was canceled by cancelContentPlay');\n    this.pause();\n  } // When the 'content-playback' state is entered, this will let us know to play.\n  // This is needed if there is no preroll or if it errors, times out, etc.\n\n\n  this.ads._cancelledPlay = true;\n}\n\nvar obj = {}; // This reference allows videojs to be mocked in unit tests\n// while still using the available videojs import in the source code\n// @see obj.testHook\n\nvar videojsReference = videojs;\n/**\n * Checks if middleware mediators are available and\n * can be used on this platform.\n * Currently we can only use mediators on desktop platforms.\n */\n\nobj.isMiddlewareMediatorSupported = function () {\n  if (videojsReference.browser.IS_IOS || videojsReference.browser.IS_ANDROID) {\n    return false;\n  } else if ( // added when middleware was introduced in video.js\n  videojsReference.use && // added when mediators were introduced in video.js\n  videojsReference.middleware && videojsReference.middleware.TERMINATOR) {\n    return true;\n  }\n\n  return false;\n};\n\nobj.playMiddleware = function (player) {\n  return {\n    setSource: function setSource(srcObj, next) {\n      next(null, srcObj);\n    },\n    callPlay: function callPlay() {\n      // Block play calls while waiting for an ad, only if this is an\n      // ad supported player\n      if (player.ads && player.ads._shouldBlockPlay === true) {\n        player.ads.debug('Using playMiddleware to block content playback');\n        player.ads._playBlocked = true;\n        return videojsReference.middleware.TERMINATOR;\n      }\n    },\n    play: function play(terminated, playPromise) {\n      if (player.ads && player.ads._playBlocked && terminated) {\n        player.ads.debug('Play call to Tech was terminated.'); // Trigger play event to match the user's intent to play.\n        // The call to play on the Tech has been blocked, so triggering\n        // the event on the Player will not affect the Tech's playback state.\n\n        player.trigger('play'); // At this point the player has technically started\n\n        player.addClass('vjs-has-started'); // Reset playBlocked\n\n        player.ads._playBlocked = false; // Safari issues a pause event when autoplay is blocked but other browsers\n        // do not, so we send a pause for consistency in those cases. This keeps the\n        // play button in the correct state if play is rejected.\n      } else if (playPromise && playPromise.catch) {\n        playPromise.catch(function (e) {\n          if (e.name === 'NotAllowedError' && !videojs.browser.IS_SAFARI) {\n            player.trigger('pause');\n          }\n        });\n      }\n    }\n  };\n};\n\nobj.testHook = function (testVjs) {\n  videojsReference = testVjs;\n};\n\nvar playMiddleware = obj.playMiddleware,\n    isMiddlewareMediatorSupported = obj.isMiddlewareMediatorSupported;\n/**\n * Whether or not this copy of Video.js has the ads plugin.\n *\n * @return {boolean}\n *         If `true`, has the plugin. `false` otherwise.\n */\n\nvar hasAdsPlugin = function hasAdsPlugin() {\n  // Video.js 6 and 7 have a getPlugin method.\n  if (videojs.getPlugin) {\n    return Boolean(videojs.getPlugin('ads'));\n  } // Video.js 5 does not have a getPlugin method, so check the player prototype.\n\n\n  var Player = videojs.getComponent('Player');\n  return Boolean(Player && Player.prototype.ads);\n};\n/**\n * Register contrib-ads with Video.js, but provide protection for duplicate\n * copies of the plugin. This could happen if, for example, a stitched ads\n * plugin and a client-side ads plugin are included simultaneously with their\n * own copies of contrib-ads.\n *\n * If contrib-ads detects a pre-existing duplicate, it will not register\n * itself.\n *\n * Ad plugins using contrib-ads and anticipating that this could come into\n * effect should verify that the contrib-ads they are using is of a compatible\n * version.\n *\n * @param  {Function} contribAdsPlugin\n *         The plugin function.\n *\n * @return {boolean}\n *         When `true`, the plugin was registered. When `false`, the plugin\n *         was not registered.\n */\n\n\nfunction register(contribAdsPlugin) {\n  // If the ads plugin already exists, do not overwrite it.\n  if (hasAdsPlugin(videojs)) {\n    return false;\n  } // Cross-compatibility with Video.js 6/7 and 5.\n\n\n  var registerPlugin = videojs.registerPlugin || videojs.plugin; // Register this plugin with Video.js.\n\n  registerPlugin('ads', contribAdsPlugin); // Register the play middleware with Video.js on script execution,\n  // to avoid a new playMiddleware factory being added for each player.\n  // The `usingContribAdsMiddleware_` flag is used to ensure that we only ever\n  // register the middleware once - despite the ability to de-register and\n  // re-register the plugin itself.\n\n  if (isMiddlewareMediatorSupported() && !videojs.usingContribAdsMiddleware_) {\n    // Register the play middleware\n    videojs.use('*', playMiddleware);\n    videojs.usingContribAdsMiddleware_ = true;\n    videojs.log.debug('Play middleware has been registered with videojs');\n  }\n\n  return true;\n}\n\nvar States =\n/*#__PURE__*/\nfunction () {\n  function States() {}\n\n  States.getState = function getState(name) {\n    if (!name) {\n      return;\n    }\n\n    if (States.states_ && States.states_[name]) {\n      return States.states_[name];\n    }\n  };\n\n  States.registerState = function registerState(name, StateToRegister) {\n    if (typeof name !== 'string' || !name) {\n      throw new Error(\"Illegal state name, \\\"\" + name + \"\\\"; must be a non-empty string.\");\n    }\n\n    if (!States.states_) {\n      States.states_ = {};\n    }\n\n    States.states_[name] = StateToRegister;\n    return StateToRegister;\n  };\n\n  return States;\n}();\n\nvar State =\n/*#__PURE__*/\nfunction () {\n  State._getName = function _getName() {\n    return 'Anonymous State';\n  };\n\n  function State(player) {\n    this.player = player;\n  }\n  /*\n   * This is the only allowed way to perform state transitions. State transitions usually\n   * happen in player event handlers. They can also happen recursively in `init`. They\n   * should _not_ happen in `cleanup`.\n   */\n\n\n  var _proto = State.prototype;\n\n  _proto.transitionTo = function transitionTo(NewState) {\n    var player = this.player; // Since State is an abstract class, this will refer to\n    // the state that is extending this class\n\n    this.cleanup(player);\n    var newState = new NewState(player);\n    player.ads._state = newState;\n    player.ads.debug(this.constructor._getName() + ' -> ' + newState.constructor._getName());\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    newState.init.apply(newState, [player].concat(args));\n  }\n  /*\n   * Implemented by subclasses to provide initialization logic when transitioning\n   * to a new state.\n   */\n  ;\n\n  _proto.init = function init() {}\n  /*\n   * Implemented by subclasses to provide cleanup logic when transitioning\n   * to a new state.\n   */\n  ;\n\n  _proto.cleanup = function cleanup() {}\n  /*\n   * Default event handlers. Different states can override these to provide behaviors.\n   */\n  ;\n\n  _proto.onPlay = function onPlay() {};\n\n  _proto.onPlaying = function onPlaying() {};\n\n  _proto.onEnded = function onEnded() {};\n\n  _proto.onAdEnded = function onAdEnded() {};\n\n  _proto.onAdsReady = function onAdsReady() {\n    videojs.log.warn('Unexpected adsready event');\n  };\n\n  _proto.onAdsError = function onAdsError() {};\n\n  _proto.onAdsCanceled = function onAdsCanceled() {};\n\n  _proto.onAdTimeout = function onAdTimeout() {};\n\n  _proto.onAdStarted = function onAdStarted() {};\n\n  _proto.onContentChanged = function onContentChanged() {};\n\n  _proto.onContentResumed = function onContentResumed() {};\n\n  _proto.onReadyForPostroll = function onReadyForPostroll() {\n    videojs.log.warn('Unexpected readyforpostroll event');\n  };\n\n  _proto.onNoPreroll = function onNoPreroll() {};\n\n  _proto.onNoPostroll = function onNoPostroll() {}\n  /*\n   * Method handlers. Different states can override these to provide behaviors.\n   */\n  ;\n\n  _proto.startLinearAdMode = function startLinearAdMode() {\n    videojs.log.warn('Unexpected startLinearAdMode invocation ' + '(State via ' + this.constructor._getName() + ')');\n  };\n\n  _proto.endLinearAdMode = function endLinearAdMode() {\n    videojs.log.warn('Unexpected endLinearAdMode invocation ' + '(State via ' + this.constructor._getName() + ')');\n  };\n\n  _proto.skipLinearAdMode = function skipLinearAdMode() {\n    videojs.log.warn('Unexpected skipLinearAdMode invocation ' + '(State via ' + this.constructor._getName() + ')');\n  }\n  /*\n   * Overridden by ContentState and AdState. Should not be overriden elsewhere.\n   */\n  ;\n\n  _proto.isAdState = function isAdState() {\n    throw new Error('isAdState unimplemented for ' + this.constructor._getName());\n  }\n  /*\n   * Overridden by Preroll and Postroll. Midrolls jump right into the ad break\n   * so there is no \"waiting\" state for them.\n   */\n  ;\n\n  _proto.isWaitingForAdBreak = function isWaitingForAdBreak() {\n    return false;\n  }\n  /*\n   * Overridden by Preroll, Midroll, and Postroll.\n   */\n  ;\n\n  _proto.isContentResuming = function isContentResuming() {\n    return false;\n  };\n\n  _proto.inAdBreak = function inAdBreak() {\n    return false;\n  }\n  /*\n   * Invoke event handler methods when events come in.\n   */\n  ;\n\n  _proto.handleEvent = function handleEvent(type) {\n    var player = this.player;\n\n    if (type === 'play') {\n      this.onPlay(player);\n    } else if (type === 'adsready') {\n      this.onAdsReady(player);\n    } else if (type === 'adserror') {\n      this.onAdsError(player);\n    } else if (type === 'adscanceled') {\n      this.onAdsCanceled(player);\n    } else if (type === 'adtimeout') {\n      this.onAdTimeout(player);\n    } else if (type === 'ads-ad-started') {\n      this.onAdStarted(player);\n    } else if (type === 'contentchanged') {\n      this.onContentChanged(player);\n    } else if (type === 'contentresumed') {\n      this.onContentResumed(player);\n    } else if (type === 'readyforpostroll') {\n      this.onReadyForPostroll(player);\n    } else if (type === 'playing') {\n      this.onPlaying(player);\n    } else if (type === 'ended') {\n      this.onEnded(player);\n    } else if (type === 'nopreroll') {\n      this.onNoPreroll(player);\n    } else if (type === 'nopostroll') {\n      this.onNoPostroll(player);\n    } else if (type === 'adended') {\n      this.onAdEnded(player);\n    }\n  };\n\n  return State;\n}();\n\nStates.registerState('State', State);\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/*\n * This class contains logic for all ads, be they prerolls, midrolls, or postrolls.\n * Primarily, this involves handling startLinearAdMode and endLinearAdMode.\n * It also handles content resuming.\n */\n\nvar AdState =\n/*#__PURE__*/\nfunction (_State) {\n  _inheritsLoose(AdState, _State);\n\n  function AdState(player) {\n    var _this;\n\n    _this = _State.call(this, player) || this;\n    _this.contentResuming = false;\n    _this.waitingForAdBreak = false;\n    return _this;\n  }\n  /*\n   * Overrides State.isAdState\n   */\n\n\n  var _proto = AdState.prototype;\n\n  _proto.isAdState = function isAdState() {\n    return true;\n  }\n  /*\n   * We end the content-resuming process on the playing event because this is the exact\n   * moment that content playback is no longer blocked by ads.\n   */\n  ;\n\n  _proto.onPlaying = function onPlaying() {\n    var ContentPlayback = States.getState('ContentPlayback');\n\n    if (this.contentResuming) {\n      this.transitionTo(ContentPlayback);\n    }\n  }\n  /*\n   * If the ad plugin does not result in a playing event when resuming content after an\n   * ad, they should instead trigger a contentresumed event to signal that content should\n   * resume. The main use case for this is when ads are stitched into the content video.\n   */\n  ;\n\n  _proto.onContentResumed = function onContentResumed() {\n    var ContentPlayback = States.getState('ContentPlayback');\n\n    if (this.contentResuming) {\n      this.transitionTo(ContentPlayback);\n    }\n  }\n  /*\n   * Check if we are in an ad state waiting for the ad plugin to start\n   * an ad break.\n   */\n  ;\n\n  _proto.isWaitingForAdBreak = function isWaitingForAdBreak() {\n    return this.waitingForAdBreak;\n  }\n  /*\n   * Allows you to check if content is currently resuming after an ad break.\n   */\n  ;\n\n  _proto.isContentResuming = function isContentResuming() {\n    return this.contentResuming;\n  }\n  /*\n   * Allows you to check if an ad break is in progress.\n   */\n  ;\n\n  _proto.inAdBreak = function inAdBreak() {\n    return this.player.ads._inLinearAdMode === true;\n  };\n\n  return AdState;\n}(State);\n\nStates.registerState('AdState', AdState);\n\nvar ContentState =\n/*#__PURE__*/\nfunction (_State) {\n  _inheritsLoose(ContentState, _State);\n\n  function ContentState() {\n    return _State.apply(this, arguments) || this;\n  }\n\n  var _proto = ContentState.prototype;\n\n  /*\n   * Overrides State.isAdState\n   */\n  _proto.isAdState = function isAdState() {\n    return false;\n  }\n  /*\n   * Source change sends you back to preroll checks. contentchanged does not\n   * fire during ad breaks, so we don't need to worry about that.\n   */\n  ;\n\n  _proto.onContentChanged = function onContentChanged(player) {\n    var BeforePreroll = States.getState('BeforePreroll');\n    var Preroll = States.getState('Preroll');\n    player.ads.debug('Received contentchanged event (ContentState)');\n\n    if (player.paused()) {\n      this.transitionTo(BeforePreroll);\n    } else {\n      this.transitionTo(Preroll, false);\n      player.pause();\n      player.ads._pausedOnContentupdate = true;\n    }\n  };\n\n  return ContentState;\n}(State);\n\nStates.registerState('ContentState', ContentState);\n\nvar ContentState$1 = States.getState('ContentState');\n\nvar AdsDone =\n/*#__PURE__*/\nfunction (_ContentState) {\n  _inheritsLoose(AdsDone, _ContentState);\n\n  function AdsDone() {\n    return _ContentState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  AdsDone._getName = function _getName() {\n    return 'AdsDone';\n  }\n  /*\n   * For state transitions to work correctly, initialization should\n   * happen here, not in a constructor.\n   */\n  ;\n\n  var _proto = AdsDone.prototype;\n\n  _proto.init = function init(player) {\n    // From now on, `ended` events won't be redispatched\n    player.ads._contentHasEnded = true;\n    player.trigger('ended');\n  }\n  /*\n   * Midrolls do not play after ads are done.\n   */\n  ;\n\n  _proto.startLinearAdMode = function startLinearAdMode() {\n    videojs.log.warn('Unexpected startLinearAdMode invocation (AdsDone)');\n  };\n\n  return AdsDone;\n}(ContentState$1);\n\nStates.registerState('AdsDone', AdsDone);\n\n/*\nThe snapshot feature is responsible for saving the player state before an ad, then\nrestoring the player state after an ad.\n*/\nvar tryToResumeTimeout_;\n/*\n * Returns an object that captures the portions of player state relevant to\n * video playback. The result of this function can be passed to\n * restorePlayerSnapshot with a player to return the player to the state it\n * was in when this function was invoked.\n * @param {Object} player The videojs player object\n */\n\nfunction getPlayerSnapshot(player) {\n  var currentTime;\n\n  if (videojs.browser.IS_IOS && player.ads.isLive(player)) {\n    // Record how far behind live we are\n    if (player.seekable().length > 0) {\n      currentTime = player.currentTime() - player.seekable().end(0);\n    } else {\n      currentTime = player.currentTime();\n    }\n  } else {\n    currentTime = player.currentTime();\n  }\n\n  var tech = player.$('.vjs-tech');\n  var tracks = player.textTracks ? player.textTracks() : [];\n  var suppressedTracks = [];\n  var snapshotObject = {\n    ended: player.ended(),\n    currentSrc: player.currentSrc(),\n    sources: player.currentSources(),\n    src: player.tech_.src(),\n    currentTime: currentTime,\n    type: player.currentType()\n  };\n\n  if (tech) {\n    snapshotObject.style = tech.getAttribute('style');\n  }\n\n  for (var i = 0; i < tracks.length; i++) {\n    var track = tracks[i];\n    suppressedTracks.push({\n      track: track,\n      mode: track.mode\n    });\n    track.mode = 'disabled';\n  }\n\n  snapshotObject.suppressedTracks = suppressedTracks;\n  return snapshotObject;\n}\n/*\n * Attempts to modify the specified player so that its state is equivalent to\n * the state of the snapshot.\n * @param {Object} player - the videojs player object\n * @param {Object} snapshotObject - the player state to apply\n */\n\nfunction restorePlayerSnapshot(player, callback) {\n  var snapshotObject = player.ads.snapshot;\n\n  if (callback === undefined) {\n    callback = function callback() {};\n  }\n\n  if (player.ads.disableNextSnapshotRestore === true) {\n    player.ads.disableNextSnapshotRestore = false;\n    delete player.ads.snapshot;\n    callback();\n    return;\n  } // The playback tech\n\n\n  var tech = player.$('.vjs-tech'); // the number of[ remaining attempts to restore the snapshot\n\n  var attempts = 20;\n  var suppressedTracks = snapshotObject.suppressedTracks;\n  var trackSnapshot;\n\n  var restoreTracks = function restoreTracks() {\n    for (var i = 0; i < suppressedTracks.length; i++) {\n      trackSnapshot = suppressedTracks[i];\n      trackSnapshot.track.mode = trackSnapshot.mode;\n    }\n  }; // Finish restoring the playback state.\n  // This only happens if the content video element was reused for ad playback.\n\n\n  var resume = function resume() {\n    var currentTime; // Live video on iOS has special logic to try to seek to the right place after\n    // an ad.\n\n    if (videojs.browser.IS_IOS && player.ads.isLive(player)) {\n      if (snapshotObject.currentTime < 0) {\n        // Playback was behind real time, so seek backwards to match\n        if (player.seekable().length > 0) {\n          currentTime = player.seekable().end(0) + snapshotObject.currentTime;\n        } else {\n          currentTime = player.currentTime();\n        }\n\n        player.currentTime(currentTime);\n      } // iOS live play after restore if player was paused (would not be paused if\n      // ad played muted behind ad)\n\n\n      if (player.paused()) {\n        var playPromise = player.play();\n\n        if (playPromise && playPromise.catch) {\n          playPromise.catch(function (error) {\n            videojs.log.warn('Play promise rejected in IOS snapshot resume', error);\n          });\n        }\n      } // Restore the video position after an ad.\n      // We check snapshotObject.ended because the content starts at the beginning again\n      // after being restored.\n\n    } else if (snapshotObject.ended) {\n      // For postrolls, seek to the player's current duration.\n      // It could be different from the snapshot's currentTime due to\n      // inaccuracy in HLS.\n      player.currentTime(player.duration());\n    } else {\n      // Prerolls and midrolls, just seek to the player time before the ad.\n      player.currentTime(snapshotObject.currentTime);\n\n      var _playPromise = player.play();\n\n      if (_playPromise && _playPromise.catch) {\n        _playPromise.catch(function (error) {\n          videojs.log.warn('Play promise rejected in snapshot resume', error);\n        });\n      }\n    } // if we added autoplay to force content loading on iOS, remove it now\n    // that it has served its purpose\n\n\n    if (player.ads.shouldRemoveAutoplay_) {\n      player.autoplay(false);\n      player.ads.shouldRemoveAutoplay_ = false;\n    }\n  }; // Determine if the video element has loaded enough of the snapshot source\n  // to be ready to apply the rest of the state.\n  // This only happens if the content video element was reused for ad playback.\n\n\n  var tryToResume = function tryToResume() {\n    // tryToResume can either have been called through the `contentcanplay`\n    // event or fired through setTimeout.\n    // When tryToResume is called, we should make sure to clear out the other\n    // way it could've been called by removing the listener and clearing out\n    // the timeout.\n    player.off('contentcanplay', tryToResume);\n\n    if (tryToResumeTimeout_) {\n      player.clearTimeout(tryToResumeTimeout_);\n    } // Tech may have changed depending on the differences in sources of the\n    // original video and that of the ad\n\n\n    tech = player.el().querySelector('.vjs-tech');\n\n    if (tech.readyState > 1) {\n      // some browsers and media aren't \"seekable\".\n      // readyState greater than 1 allows for seeking without exceptions\n      return resume();\n    }\n\n    if (tech.seekable === undefined) {\n      // if the tech doesn't expose the seekable time ranges, try to\n      // resume playback immediately\n      return resume();\n    }\n\n    if (tech.seekable.length > 0) {\n      // if some period of the video is seekable, resume playback\n      return resume();\n    } // delay a bit and then check again unless we're out of attempts\n\n\n    if (attempts--) {\n      player.setTimeout(tryToResume, 50);\n    } else {\n      try {\n        resume();\n      } catch (e) {\n        videojs.log.warn('Failed to resume the content after an advertisement', e);\n      }\n    }\n  };\n\n  if ('style' in snapshotObject) {\n    // overwrite all css style properties to restore state precisely\n    tech.setAttribute('style', snapshotObject.style || '');\n  } // Determine whether the player needs to be restored to its state\n  // before ad playback began. With a custom ad display or burned-in\n  // ads, the content player state hasn't been modified and so no\n  // restoration is required\n\n\n  if (player.ads.videoElementRecycled()) {\n    // Snapshot restore is done, so now we're really finished.\n    player.one('resumeended', function () {\n      delete player.ads.snapshot;\n      callback();\n    }); // on ios7, fiddling with textTracks too early will cause safari to crash\n\n    player.one('contentloadedmetadata', restoreTracks); // adding autoplay guarantees that Safari will load the content so we can\n    // seek back to the correct time after ads\n\n    if (videojs.browser.IS_IOS && !player.autoplay()) {\n      player.autoplay(true); // if we get here, the player was not originally configured to autoplay,\n      // so we should remove it after it has served its purpose\n\n      player.ads.shouldRemoveAutoplay_ = true;\n    } // if the src changed for ad playback, reset it\n\n\n    player.src(snapshotObject.sources); // and then resume from the snapshots time once the original src has loaded\n    // in some browsers (firefox) `canplay` may not fire correctly.\n    // Reace the `canplay` event with a timeout.\n\n    player.one('contentcanplay', tryToResume);\n    tryToResumeTimeout_ = player.setTimeout(tryToResume, 2000);\n  } else {\n    // if we didn't change the src, just restore the tracks\n    restoreTracks(); // we don't need to check snapshotObject.ended here because the content video\n    // element wasn't recycled\n\n    if (!player.ended()) {\n      // the src didn't change and this wasn't a postroll\n      // just resume playback at the current time.\n      var playPromise = player.play();\n\n      if (playPromise && playPromise.catch) {\n        playPromise.catch(function (error) {\n          videojs.log.warn('Play promise rejected in snapshot restore', error);\n        });\n      }\n    } // snapshot restore is complete\n\n\n    delete player.ads.snapshot;\n    callback();\n  }\n}\n\n/*\n * Encapsulates logic for starting and ending ad breaks. An ad break\n * is the time between startLinearAdMode and endLinearAdMode. The ad\n * plugin may play 0 or more ads during this time.\n */\n\nfunction start(player) {\n  player.ads.debug('Starting ad break');\n  player.ads._inLinearAdMode = true; // No longer does anything, used to move us to ad-playback\n\n  player.trigger('adstart'); // Capture current player state snapshot\n\n  if (player.ads.shouldTakeSnapshots()) {\n    player.ads.snapshot = getPlayerSnapshot(player);\n  } // Mute the player behind the ad\n\n\n  if (player.ads.shouldPlayContentBehindAd(player)) {\n    player.ads.preAdVolume_ = player.volume();\n    player.volume(0);\n  } // Add css to the element to indicate and ad is playing.\n\n\n  player.addClass('vjs-ad-playing'); // We should remove the vjs-live class if it has been added in order to\n  // show the adprogress control bar on Android devices for falsely\n  // determined LIVE videos due to the duration incorrectly reported as Infinity\n\n  if (player.hasClass('vjs-live')) {\n    player.removeClass('vjs-live');\n  } // This removes the native poster so the ads don't show the content\n  // poster if content element is reused for ad playback.\n\n\n  player.ads.removeNativePoster();\n}\n\nfunction end(player, callback) {\n  player.ads.debug('Ending ad break');\n\n  if (callback === undefined) {\n    callback = function callback() {};\n  }\n\n  player.ads.adType = null;\n  player.ads._inLinearAdMode = false; // Signals the end of the ad break to anyone listening.\n\n  player.trigger('adend');\n  player.removeClass('vjs-ad-playing'); // We should add the vjs-live class back if the video is a LIVE video\n  // If we dont do this, then for a LIVE Video, we will get an incorrect\n  // styled control, which displays the time for the video\n\n  if (player.ads.isLive(player)) {\n    player.addClass('vjs-live');\n  } // Restore snapshot\n\n\n  if (player.ads.shouldTakeSnapshots()) {\n    restorePlayerSnapshot(player, callback); // Reset the volume to pre-ad levels\n  } else {\n    player.volume(player.ads.preAdVolume_);\n    callback();\n  }\n}\n\nvar obj$1 = {\n  start: start,\n  end: end\n};\n\nvar AdState$1 = States.getState('AdState');\n/*\n * This state encapsulates waiting for prerolls, preroll playback, and\n * content restoration after a preroll.\n */\n\nvar Preroll =\n/*#__PURE__*/\nfunction (_AdState) {\n  _inheritsLoose(Preroll, _AdState);\n\n  function Preroll() {\n    return _AdState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  Preroll._getName = function _getName() {\n    return 'Preroll';\n  }\n  /*\n   * For state transitions to work correctly, initialization should\n   * happen here, not in a constructor.\n   */\n  ;\n\n  var _proto = Preroll.prototype;\n\n  _proto.init = function init(player, adsReady, shouldResumeToContent) {\n    this.waitingForAdBreak = true; // Loading spinner from now until ad start or end of ad break.\n\n    player.addClass('vjs-ad-loading'); // If adserror, adscanceled, nopreroll or skipLinearAdMode already\n    // ocurred, resume to content immediately\n\n    if (shouldResumeToContent || player.ads.nopreroll_) {\n      return this.resumeAfterNoPreroll(player);\n    } // Determine preroll timeout based on plugin settings\n\n\n    var timeout = player.ads.settings.timeout;\n\n    if (typeof player.ads.settings.prerollTimeout === 'number') {\n      timeout = player.ads.settings.prerollTimeout;\n    } // Start the clock ticking for ad timeout\n\n\n    this._timeout = player.setTimeout(function () {\n      player.trigger('adtimeout');\n    }, timeout); // If adsready already happened, lets get started. Otherwise,\n    // wait until onAdsReady.\n\n    if (adsReady) {\n      this.handleAdsReady();\n    } else {\n      this.adsReady = false;\n    }\n  }\n  /*\n   * Adsready event after play event.\n   */\n  ;\n\n  _proto.onAdsReady = function onAdsReady(player) {\n    if (!player.ads.inAdBreak()) {\n      player.ads.debug('Received adsready event (Preroll)');\n      this.handleAdsReady();\n    } else {\n      videojs.log.warn('Unexpected adsready event (Preroll)');\n    }\n  }\n  /*\n   * Ad plugin is ready. Let's get started on this preroll.\n   */\n  ;\n\n  _proto.handleAdsReady = function handleAdsReady() {\n    this.adsReady = true;\n    this.readyForPreroll();\n  }\n  /*\n   * Helper to call a callback only after a loadstart event.\n   * If we start content or ads before loadstart, loadstart\n   * will not be prefixed correctly.\n   */\n  ;\n\n  _proto.afterLoadStart = function afterLoadStart(callback) {\n    var player = this.player;\n\n    if (player.ads._hasThereBeenALoadStartDuringPlayerLife) {\n      callback();\n    } else {\n      player.ads.debug('Waiting for loadstart...');\n      player.one('loadstart', function () {\n        player.ads.debug('Received loadstart event');\n        callback();\n      });\n    }\n  }\n  /*\n   * If there is no preroll, play content instead.\n   */\n  ;\n\n  _proto.noPreroll = function noPreroll() {\n    var _this = this;\n\n    this.afterLoadStart(function () {\n      _this.player.ads.debug('Skipping prerolls due to nopreroll event (Preroll)');\n\n      _this.resumeAfterNoPreroll(_this.player);\n    });\n  }\n  /*\n   * Fire the readyforpreroll event. If loadstart hasn't happened yet,\n   * wait until loadstart first.\n   */\n  ;\n\n  _proto.readyForPreroll = function readyForPreroll() {\n    var player = this.player;\n    this.afterLoadStart(function () {\n      player.ads.debug('Triggered readyforpreroll event (Preroll)');\n      player.trigger('readyforpreroll');\n    });\n  }\n  /*\n   * adscanceled cancels all ads for the source. Play content now.\n   */\n  ;\n\n  _proto.onAdsCanceled = function onAdsCanceled(player) {\n    var _this2 = this;\n\n    player.ads.debug('adscanceled (Preroll)');\n    this.afterLoadStart(function () {\n      _this2.resumeAfterNoPreroll(player);\n    });\n  }\n  /*\n   * An ad error occured. Play content instead.\n   */\n  ;\n\n  _proto.onAdsError = function onAdsError(player) {\n    var _this3 = this;\n\n    videojs.log('adserror (Preroll)'); // In the future, we may not want to do this automatically.\n    // Ad plugins should be able to choose to continue the ad break\n    // if there was an error.\n\n    if (this.inAdBreak()) {\n      player.ads.endLinearAdMode();\n    } else {\n      this.afterLoadStart(function () {\n        _this3.resumeAfterNoPreroll(player);\n      });\n    }\n  }\n  /*\n   * Ad plugin invoked startLinearAdMode, the ad break starts now.\n   */\n  ;\n\n  _proto.startLinearAdMode = function startLinearAdMode() {\n    var player = this.player;\n\n    if (this.adsReady && !player.ads.inAdBreak() && !this.isContentResuming()) {\n      this.clearTimeout(player);\n      player.ads.adType = 'preroll';\n      this.waitingForAdBreak = false;\n      obj$1.start(player); // We don't need to block play calls anymore\n\n      player.ads._shouldBlockPlay = false;\n    } else {\n      videojs.log.warn('Unexpected startLinearAdMode invocation (Preroll)');\n    }\n  }\n  /*\n   * An ad has actually started playing.\n   * Remove the loading spinner.\n   */\n  ;\n\n  _proto.onAdStarted = function onAdStarted(player) {\n    player.removeClass('vjs-ad-loading');\n  }\n  /*\n   * Ad plugin invoked endLinearAdMode, the ad break ends now.\n   */\n  ;\n\n  _proto.endLinearAdMode = function endLinearAdMode() {\n    var player = this.player;\n\n    if (this.inAdBreak()) {\n      player.removeClass('vjs-ad-loading');\n      player.addClass('vjs-ad-content-resuming');\n      this.contentResuming = true;\n      obj$1.end(player);\n    }\n  }\n  /*\n   * Ad skipped by ad plugin. Play content instead.\n   */\n  ;\n\n  _proto.skipLinearAdMode = function skipLinearAdMode() {\n    var _this4 = this;\n\n    var player = this.player;\n\n    if (player.ads.inAdBreak() || this.isContentResuming()) {\n      videojs.log.warn('Unexpected skipLinearAdMode invocation');\n    } else {\n      this.afterLoadStart(function () {\n        player.trigger('adskip');\n        player.ads.debug('skipLinearAdMode (Preroll)');\n\n        _this4.resumeAfterNoPreroll(player);\n      });\n    }\n  }\n  /*\n   * Prerolls took too long! Play content instead.\n   */\n  ;\n\n  _proto.onAdTimeout = function onAdTimeout(player) {\n    var _this5 = this;\n\n    this.afterLoadStart(function () {\n      player.ads.debug('adtimeout (Preroll)');\n\n      _this5.resumeAfterNoPreroll(player);\n    });\n  }\n  /*\n   * Check if nopreroll event was too late before handling it.\n   */\n  ;\n\n  _proto.onNoPreroll = function onNoPreroll(player) {\n    if (player.ads.inAdBreak() || this.isContentResuming()) {\n      videojs.log.warn('Unexpected nopreroll event (Preroll)');\n    } else {\n      this.noPreroll();\n    }\n  };\n\n  _proto.resumeAfterNoPreroll = function resumeAfterNoPreroll(player) {\n    // Resume to content and unblock play as there is no preroll ad\n    this.contentResuming = true;\n    player.ads._shouldBlockPlay = false;\n    this.cleanupPartial(player); // Play the content if we had requested play or we paused on 'contentupdate'\n    // and we haven't played yet. This happens if there was no preroll or if it\n    // errored, timed out, etc. Otherwise snapshot restore would play.\n\n    if (player.ads._playRequested || player.ads._pausedOnContentupdate) {\n      if (player.paused()) {\n        player.ads.debug('resumeAfterNoPreroll: attempting to resume playback (Preroll)');\n        var playPromise = player.play();\n\n        if (playPromise && playPromise.then) {\n          playPromise.then(null, function (e) {});\n        }\n      } else {\n        player.ads.debug('resumeAfterNoPreroll: already playing (Preroll)');\n        player.trigger('play');\n        player.trigger('playing');\n      }\n    }\n  }\n  /*\n   * Cleanup timeouts and spinner.\n   */\n  ;\n\n  _proto.cleanup = function cleanup(player) {\n    if (!player.ads._hasThereBeenALoadStartDuringPlayerLife) {\n      videojs.log.warn('Leaving Preroll state before loadstart event can cause issues.');\n    }\n\n    this.cleanupPartial(player);\n  }\n  /*\n   * Performs cleanup tasks without depending on a state transition. This is\n   * used mainly in cases where a preroll failed.\n   */\n  ;\n\n  _proto.cleanupPartial = function cleanupPartial(player) {\n    player.removeClass('vjs-ad-loading');\n    player.removeClass('vjs-ad-content-resuming');\n    this.clearTimeout(player);\n  }\n  /*\n   * Clear the preroll timeout and nulls out the pointer.\n   */\n  ;\n\n  _proto.clearTimeout = function clearTimeout(player) {\n    player.clearTimeout(this._timeout);\n    this._timeout = null;\n  };\n\n  return Preroll;\n}(AdState$1);\n\nStates.registerState('Preroll', Preroll);\n\nvar ContentState$2 = States.getState('ContentState');\n/*\n * This is the initial state for a player with an ad plugin. Normally, it remains in this\n * state until a \"play\" event is seen. After that, we enter the Preroll state to check for\n * prerolls. This happens regardless of whether or not any prerolls ultimately will play.\n * Errors and other conditions may lead us directly from here to ContentPlayback.\n */\n\nvar BeforePreroll =\n/*#__PURE__*/\nfunction (_ContentState) {\n  _inheritsLoose(BeforePreroll, _ContentState);\n\n  function BeforePreroll() {\n    return _ContentState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  BeforePreroll._getName = function _getName() {\n    return 'BeforePreroll';\n  }\n  /*\n   * For state transitions to work correctly, initialization should\n   * happen here, not in a constructor.\n   */\n  ;\n\n  var _proto = BeforePreroll.prototype;\n\n  _proto.init = function init(player) {\n    this.adsReady = false;\n    this.shouldResumeToContent = false; // Content playback should be blocked by callPlay() middleware if the allowVjsAutoplay\n    // option hasn't been provided and autoplay is not desired.\n\n    player.ads._shouldBlockPlay = player.ads.settings.allowVjsAutoplay ? !player.autoplay() : true;\n  }\n  /*\n   * The ad plugin may trigger adsready before the play request. If so,\n   * we record that adsready already happened so the Preroll state will know.\n   */\n  ;\n\n  _proto.onAdsReady = function onAdsReady(player) {\n    player.ads.debug('Received adsready event (BeforePreroll)');\n    this.adsReady = true;\n  }\n  /*\n   * Ad mode officially begins on the play request, because at this point\n   * content playback is blocked by the ad plugin.\n   */\n  ;\n\n  _proto.onPlay = function onPlay(player) {\n    var Preroll = States.getState('Preroll');\n    player.ads.debug('Received play event (BeforePreroll)'); // Check for prerolls\n\n    this.transitionTo(Preroll, this.adsReady, this.shouldResumeToContent);\n  }\n  /*\n   * All ads for the entire video are canceled.\n   */\n  ;\n\n  _proto.onAdsCanceled = function onAdsCanceled(player) {\n    player.ads.debug('adscanceled (BeforePreroll)');\n    this.shouldResumeToContent = true;\n  }\n  /*\n   * An ad error occured. Play content instead.\n   */\n  ;\n\n  _proto.onAdsError = function onAdsError() {\n    this.player.ads.debug('adserror (BeforePreroll)');\n    this.shouldResumeToContent = true;\n  }\n  /*\n   * If there is no preroll, don't wait for a play event to move forward.\n   */\n  ;\n\n  _proto.onNoPreroll = function onNoPreroll() {\n    this.player.ads.debug('Skipping prerolls due to nopreroll event (BeforePreroll)');\n    this.shouldResumeToContent = true;\n  }\n  /*\n   * Prerolls skipped by ad plugin. Play content instead.\n   */\n  ;\n\n  _proto.skipLinearAdMode = function skipLinearAdMode() {\n    var player = this.player;\n    player.trigger('adskip');\n    player.ads.debug('skipLinearAdMode (BeforePreroll)');\n    this.shouldResumeToContent = true;\n  };\n\n  _proto.onContentChanged = function onContentChanged() {\n    this.init(this.player);\n  };\n\n  return BeforePreroll;\n}(ContentState$2);\n\nStates.registerState('BeforePreroll', BeforePreroll);\n\nvar AdState$2 = States.getState('AdState');\n\nvar Midroll =\n/*#__PURE__*/\nfunction (_AdState) {\n  _inheritsLoose(Midroll, _AdState);\n\n  function Midroll() {\n    return _AdState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  Midroll._getName = function _getName() {\n    return 'Midroll';\n  }\n  /*\n   * Midroll breaks happen when the ad plugin calls startLinearAdMode,\n   * which can happen at any time during content playback.\n   */\n  ;\n\n  var _proto = Midroll.prototype;\n\n  _proto.init = function init(player) {\n    player.ads.adType = 'midroll';\n    obj$1.start(player);\n    player.addClass('vjs-ad-loading');\n  }\n  /*\n   * An ad has actually started playing.\n   * Remove the loading spinner.\n   */\n  ;\n\n  _proto.onAdStarted = function onAdStarted(player) {\n    player.removeClass('vjs-ad-loading');\n  }\n  /*\n   * Midroll break is done.\n   */\n  ;\n\n  _proto.endLinearAdMode = function endLinearAdMode() {\n    var player = this.player;\n\n    if (this.inAdBreak()) {\n      this.contentResuming = true;\n      player.addClass('vjs-ad-content-resuming');\n      player.removeClass('vjs-ad-loading');\n      obj$1.end(player);\n    }\n  }\n  /*\n   * End midroll break if there is an error.\n   */\n  ;\n\n  _proto.onAdsError = function onAdsError(player) {\n    // In the future, we may not want to do this automatically.\n    // Ad plugins should be able to choose to continue the ad break\n    // if there was an error.\n    if (this.inAdBreak()) {\n      player.ads.endLinearAdMode();\n    }\n  }\n  /*\n   * Cleanup CSS classes.\n   */\n  ;\n\n  _proto.cleanup = function cleanup(player) {\n    player.removeClass('vjs-ad-loading');\n    player.removeClass('vjs-ad-content-resuming');\n  };\n\n  return Midroll;\n}(AdState$2);\n\nStates.registerState('Midroll', Midroll);\n\nvar AdState$3 = States.getState('AdState');\n\nvar Postroll =\n/*#__PURE__*/\nfunction (_AdState) {\n  _inheritsLoose(Postroll, _AdState);\n\n  function Postroll() {\n    return _AdState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  Postroll._getName = function _getName() {\n    return 'Postroll';\n  }\n  /*\n   * For state transitions to work correctly, initialization should\n   * happen here, not in a constructor.\n   */\n  ;\n\n  var _proto = Postroll.prototype;\n\n  _proto.init = function init(player) {\n    this.waitingForAdBreak = true; // Legacy name that now simply means \"handling postrolls\".\n\n    player.ads._contentEnding = true; // Start postroll process.\n\n    if (!player.ads.nopostroll_) {\n      player.addClass('vjs-ad-loading'); // Determine postroll timeout based on plugin settings\n\n      var timeout = player.ads.settings.timeout;\n\n      if (typeof player.ads.settings.postrollTimeout === 'number') {\n        timeout = player.ads.settings.postrollTimeout;\n      }\n\n      this._postrollTimeout = player.setTimeout(function () {\n        player.trigger('adtimeout');\n      }, timeout); // No postroll, ads are done\n    } else {\n      this.resumeContent(player);\n      var AdsDone = States.getState('AdsDone');\n      this.transitionTo(AdsDone);\n    }\n  }\n  /*\n   * Start the postroll if it's not too late.\n   */\n  ;\n\n  _proto.startLinearAdMode = function startLinearAdMode() {\n    var player = this.player;\n\n    if (!player.ads.inAdBreak() && !this.isContentResuming()) {\n      player.ads.adType = 'postroll';\n      player.clearTimeout(this._postrollTimeout);\n      this.waitingForAdBreak = false;\n      obj$1.start(player);\n    } else {\n      videojs.log.warn('Unexpected startLinearAdMode invocation (Postroll)');\n    }\n  }\n  /*\n   * An ad has actually started playing.\n   * Remove the loading spinner.\n   */\n  ;\n\n  _proto.onAdStarted = function onAdStarted(player) {\n    player.removeClass('vjs-ad-loading');\n  }\n  /*\n   * Ending a postroll triggers the ended event.\n   */\n  ;\n\n  _proto.endLinearAdMode = function endLinearAdMode() {\n    var _this = this;\n\n    var player = this.player;\n    var AdsDone = States.getState('AdsDone');\n\n    if (this.inAdBreak()) {\n      player.removeClass('vjs-ad-loading');\n      this.resumeContent(player);\n      obj$1.end(player, function () {\n        _this.transitionTo(AdsDone);\n      });\n    }\n  }\n  /*\n   * Postroll skipped, time to clean up.\n   */\n  ;\n\n  _proto.skipLinearAdMode = function skipLinearAdMode() {\n    var player = this.player;\n\n    if (player.ads.inAdBreak() || this.isContentResuming()) {\n      videojs.log.warn('Unexpected skipLinearAdMode invocation');\n    } else {\n      player.ads.debug('Postroll abort (skipLinearAdMode)');\n      player.trigger('adskip');\n      this.abort(player);\n    }\n  }\n  /*\n   * Postroll timed out, time to clean up.\n   */\n  ;\n\n  _proto.onAdTimeout = function onAdTimeout(player) {\n    player.ads.debug('Postroll abort (adtimeout)');\n    this.abort(player);\n  }\n  /*\n   * Postroll errored out, time to clean up.\n   */\n  ;\n\n  _proto.onAdsError = function onAdsError(player) {\n    player.ads.debug('Postroll abort (adserror)'); // In the future, we may not want to do this automatically.\n    // Ad plugins should be able to choose to continue the ad break\n    // if there was an error.\n\n    if (player.ads.inAdBreak()) {\n      player.ads.endLinearAdMode();\n    } else {\n      this.abort(player);\n    }\n  }\n  /*\n   * Handle content change if we're not in an ad break.\n   */\n  ;\n\n  _proto.onContentChanged = function onContentChanged(player) {\n    // Content resuming after Postroll. Content is paused\n    // at this point, since it is done playing.\n    if (this.isContentResuming()) {\n      var BeforePreroll = States.getState('BeforePreroll');\n      this.transitionTo(BeforePreroll); // Waiting for postroll to start. Content is considered playing\n      // at this point, since it had to be playing to start the postroll.\n    } else if (!this.inAdBreak()) {\n      var Preroll = States.getState('Preroll');\n      this.transitionTo(Preroll);\n    }\n  }\n  /*\n   * Wrap up if there is no postroll.\n   */\n  ;\n\n  _proto.onNoPostroll = function onNoPostroll(player) {\n    if (!this.isContentResuming() && !this.inAdBreak()) {\n      this.abort(player);\n    } else {\n      videojs.log.warn('Unexpected nopostroll event (Postroll)');\n    }\n  };\n\n  _proto.resumeContent = function resumeContent(player) {\n    this.contentResuming = true;\n    player.addClass('vjs-ad-content-resuming');\n  }\n  /*\n   * Helper for ending Postrolls. In the future we may want to\n   * refactor this class so that `cleanup` handles all of this.\n   */\n  ;\n\n  _proto.abort = function abort(player) {\n    var AdsDone = States.getState('AdsDone');\n    this.resumeContent(player);\n    player.removeClass('vjs-ad-loading');\n    this.transitionTo(AdsDone);\n  }\n  /*\n   * Cleanup timeouts and state.\n   */\n  ;\n\n  _proto.cleanup = function cleanup(player) {\n    player.removeClass('vjs-ad-content-resuming');\n    player.clearTimeout(this._postrollTimeout);\n    player.ads._contentEnding = false;\n  };\n\n  return Postroll;\n}(AdState$3);\n\nStates.registerState('Postroll', Postroll);\n\nvar ContentState$3 = States.getState('ContentState');\n/*\n * This state represents content playback the first time through before\n * content ends. After content has ended once, we check for postrolls and\n * move on to the AdsDone state rather than returning here.\n */\n\nvar ContentPlayback =\n/*#__PURE__*/\nfunction (_ContentState) {\n  _inheritsLoose(ContentPlayback, _ContentState);\n\n  function ContentPlayback() {\n    return _ContentState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  ContentPlayback._getName = function _getName() {\n    return 'ContentPlayback';\n  }\n  /*\n   * For state transitions to work correctly, initialization should\n   * happen here, not in a constructor.\n   */\n  ;\n\n  var _proto = ContentPlayback.prototype;\n\n  _proto.init = function init(player) {\n    // Don't block calls to play in content playback\n    player.ads._shouldBlockPlay = false;\n  }\n  /*\n   * In the case of a timeout, adsready might come in late. This assumes the behavior\n   * that if an ad times out, it could still interrupt the content and start playing.\n   * An ad plugin could behave otherwise by ignoring this event.\n   */\n  ;\n\n  _proto.onAdsReady = function onAdsReady(player) {\n    player.ads.debug('Received adsready event (ContentPlayback)');\n\n    if (!player.ads.nopreroll_) {\n      player.ads.debug('Triggered readyforpreroll event (ContentPlayback)');\n      player.trigger('readyforpreroll');\n    }\n  }\n  /*\n   * Content ended before postroll checks.\n   */\n  ;\n\n  _proto.onReadyForPostroll = function onReadyForPostroll(player) {\n    var Postroll = States.getState('Postroll');\n    player.ads.debug('Received readyforpostroll event');\n    this.transitionTo(Postroll);\n  }\n  /*\n   * This is how midrolls start.\n   */\n  ;\n\n  _proto.startLinearAdMode = function startLinearAdMode() {\n    var Midroll = States.getState('Midroll');\n    this.transitionTo(Midroll);\n  };\n\n  return ContentPlayback;\n}(ContentState$3);\n\nStates.registerState('ContentPlayback', ContentPlayback);\n\nvar ContentState$4 = States.getState('ContentState');\n/*\n * This state represents content playback when stitched ads are in play.\n */\n\nvar StitchedContentPlayback =\n/*#__PURE__*/\nfunction (_ContentState) {\n  _inheritsLoose(StitchedContentPlayback, _ContentState);\n\n  function StitchedContentPlayback() {\n    return _ContentState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  StitchedContentPlayback._getName = function _getName() {\n    return 'StitchedContentPlayback';\n  }\n  /*\n   * For state transitions to work correctly, initialization should\n   * happen here, not in a constructor.\n   */\n  ;\n\n  var _proto = StitchedContentPlayback.prototype;\n\n  _proto.init = function init() {\n    // Don't block calls to play in stitched ad players, ever.\n    this.player.ads._shouldBlockPlay = false;\n  }\n  /*\n   * Source change does not do anything for stitched ad players.\n   * contentchanged does not fire during ad breaks, so we don't need to\n   * worry about that.\n   */\n  ;\n\n  _proto.onContentChanged = function onContentChanged() {\n    this.player.ads.debug(\"Received contentchanged event (\" + this.constructor._getName() + \")\");\n  }\n  /*\n   * This is how stitched ads start.\n   */\n  ;\n\n  _proto.startLinearAdMode = function startLinearAdMode() {\n    var StitchedAdRoll = States.getState('StitchedAdRoll');\n    this.transitionTo(StitchedAdRoll);\n  };\n\n  return StitchedContentPlayback;\n}(ContentState$4);\n\nStates.registerState('StitchedContentPlayback', StitchedContentPlayback);\n\nvar AdState$4 = States.getState('AdState');\n\nvar StitchedAdRoll =\n/*#__PURE__*/\nfunction (_AdState) {\n  _inheritsLoose(StitchedAdRoll, _AdState);\n\n  function StitchedAdRoll() {\n    return _AdState.apply(this, arguments) || this;\n  }\n\n  /*\n   * Allows state name to be logged even after minification.\n   */\n  StitchedAdRoll._getName = function _getName() {\n    return 'StitchedAdRoll';\n  }\n  /*\n   * StitchedAdRoll breaks happen when the ad plugin calls startLinearAdMode,\n   * which can happen at any time during content playback.\n   */\n  ;\n\n  var _proto = StitchedAdRoll.prototype;\n\n  _proto.init = function init() {\n    this.waitingForAdBreak = false;\n    this.contentResuming = false;\n    this.player.ads.adType = 'stitched';\n    obj$1.start(this.player);\n  }\n  /*\n   * For stitched ads, there is no \"content resuming\" scenario, so a \"playing\"\n   * event is not relevant.\n   */\n  ;\n\n  _proto.onPlaying = function onPlaying() {}\n  /*\n   * For stitched ads, there is no \"content resuming\" scenario, so a\n   * \"contentresumed\" event is not relevant.\n   */\n  ;\n\n  _proto.onContentResumed = function onContentResumed() {}\n  /*\n   * When we see an \"adended\" event, it means that we are in a postroll that\n   * has ended (because the media ended and we are still in an ad state).\n   *\n   * In these cases, we transition back to content mode and fire ended.\n   */\n  ;\n\n  _proto.onAdEnded = function onAdEnded() {\n    this.endLinearAdMode();\n    this.player.trigger('ended');\n  }\n  /*\n   * StitchedAdRoll break is done.\n   */\n  ;\n\n  _proto.endLinearAdMode = function endLinearAdMode() {\n    var StitchedContentPlayback = States.getState('StitchedContentPlayback');\n    obj$1.end(this.player);\n    this.transitionTo(StitchedContentPlayback);\n  };\n\n  return StitchedAdRoll;\n}(AdState$4);\n\nStates.registerState('StitchedAdRoll', StitchedAdRoll);\n\n/*\nThis main plugin file is responsible for the public API and enabling the features\nthat live in in separate files.\n*/\nvar isMiddlewareMediatorSupported$1 = obj.isMiddlewareMediatorSupported;\nvar VIDEO_EVENTS = videojs.getTech('Html5').Events; // Default settings\n\nvar defaults = {\n  // Maximum amount of time in ms to wait to receive `adsready` from the ad\n  // implementation after play has been requested. Ad implementations are\n  // expected to load any dynamic libraries and make any requests to determine\n  // ad policies for a video during this time.\n  timeout: 5000,\n  // Maximum amount of time in ms to wait for the ad implementation to start\n  // linear ad mode after `readyforpreroll` has fired. This is in addition to\n  // the standard timeout.\n  prerollTimeout: undefined,\n  // Maximum amount of time in ms to wait for the ad implementation to start\n  // linear ad mode after `readyforpostroll` has fired.\n  postrollTimeout: undefined,\n  // When truthy, instructs the plugin to output additional information about\n  // plugin state to the video.js log. On most devices, the video.js log is\n  // the same as the developer console.\n  debug: false,\n  // Set this to true when using ads that are part of the content video\n  stitchedAds: false,\n  // Force content to be treated as live or not live\n  // if not defined, the code will try to infer if content is live,\n  // which can have limitations.\n  contentIsLive: undefined,\n  // If set to true, content will play muted behind ads on supported platforms. This is\n  // to support ads on video metadata cuepoints during a live stream. It also results in\n  // more precise resumes after ads during a live stream.\n  liveCuePoints: true,\n  // If set to true, callPlay middleware will not terminate the first play request in\n  // BeforePreroll if the player intends to autoplay. This allows the manual autoplay\n  // attempt made by video.js to resolve/reject naturally and trigger an 'autoplay-success'\n  // or 'autoplay-failure' event with which other plugins can interface.\n  allowVjsAutoplay: videojs.options.normalizeAutoplay || false\n};\n\nvar contribAdsPlugin = function contribAdsPlugin(options) {\n  var player = this; // eslint-disable-line consistent-this\n\n  var settings = videojs.mergeOptions(defaults, options); // Prefix all video element events during ad playback\n  // if the video element emits ad-related events directly,\n  // plugins that aren't ad-aware will break. prefixing allows\n  // plugins that wish to handle ad events to do so while\n  // avoiding the complexity for common usage\n\n  var videoEvents = []; // dedupe event names\n\n  VIDEO_EVENTS.concat(['firstplay', 'loadedalldata']).forEach(function (eventName) {\n    if (videoEvents.indexOf(eventName) === -1) {\n      videoEvents.push(eventName);\n    }\n  }); // Set up redispatching of player events\n\n  player.on(videoEvents, redispatch); // Set up features to block content playback while waiting for ads.\n  // Play middleware is only supported on later versions of video.js\n  // and on desktop currently(as the user-gesture requirement on mobile\n  // will disallow calling play once play blocking is lifted)\n  // The middleware must also be registered outside of the plugin,\n  // to avoid a middleware factory being created for each player\n\n  if (!isMiddlewareMediatorSupported$1()) {\n    initCancelContentPlay(player, settings.debug);\n  } // If we haven't seen a loadstart after 5 seconds, the plugin was not initialized\n  // correctly.\n\n\n  player.setTimeout(function () {\n    if (!player.ads._hasThereBeenALoadStartDuringPlayerLife && player.src() !== '') {\n      videojs.log.error('videojs-contrib-ads has not seen a loadstart event 5 seconds ' + 'after being initialized, but a source is present. This indicates that ' + 'videojs-contrib-ads was initialized too late. It must be initialized ' + 'immediately after video.js in the same tick. As a result, some ads will not ' + 'play and some media events will be incorrect. For more information, see ' + 'http://videojs.github.io/videojs-contrib-ads/integrator/getting-started.html');\n    }\n  }, 5000); // \"vjs-has-started\" should be present at the end of a video. This makes sure it's\n  // always there.\n\n  player.on('ended', function () {\n    if (!player.hasClass('vjs-has-started')) {\n      player.addClass('vjs-has-started');\n    }\n  }); // video.js removes the vjs-waiting class on timeupdate. We want\n  // to make sure this still happens during content restoration.\n\n  player.on('contenttimeupdate', function () {\n    player.removeClass('vjs-waiting');\n  }); // We now auto-play when an ad gets loaded if we're playing ads in the same video\n  // element as the content.\n  // The problem is that in IE11, we cannot play in addurationchange but in iOS8, we\n  // cannot play from adcanplay.\n  // This will prevent ad plugins from needing to do this themselves.\n\n  player.on(['addurationchange', 'adcanplay'], function () {\n    // We don't need to handle this for stitched ads because\n    // linear ads in such cases are stitched into the content.\n    if (player.ads.settings.stitchedAds) {\n      return;\n    } // Some techs may retrigger canplay after playback has begun.\n    // So we want to procceed only if playback hasn't started.\n\n\n    if (player.hasStarted()) {\n      return;\n    }\n\n    if (player.ads.snapshot && player.currentSrc() === player.ads.snapshot.currentSrc) {\n      return;\n    } // If an ad isn't playing, don't try to play an ad. This could result from prefixed\n    // events when the player is blocked by a preroll check, but there is no preroll.\n\n\n    if (!player.ads.inAdBreak()) {\n      return;\n    }\n\n    var playPromise = player.play();\n\n    if (playPromise && playPromise.catch) {\n      playPromise.catch(function (error) {\n        videojs.log.warn('Play promise rejected when playing ad', error);\n      });\n    }\n  });\n  player.on('nopreroll', function () {\n    player.ads.debug('Received nopreroll event');\n    player.ads.nopreroll_ = true;\n  });\n  player.on('nopostroll', function () {\n    player.ads.debug('Received nopostroll event');\n    player.ads.nopostroll_ = true;\n  }); // Restart the cancelContentPlay process.\n\n  player.on('playing', function () {\n    player.ads._cancelledPlay = false;\n    player.ads._pausedOnContentupdate = false;\n  }); // Keep track of whether a play event has happened\n\n  player.on('play', function () {\n    player.ads._playRequested = true;\n  });\n  player.one('loadstart', function () {\n    player.ads._hasThereBeenALoadStartDuringPlayerLife = true;\n  });\n  player.on('loadeddata', function () {\n    player.ads._hasThereBeenALoadedData = true;\n  });\n  player.on('loadedmetadata', function () {\n    player.ads._hasThereBeenALoadedMetaData = true;\n  }); // Replace the plugin constructor with the ad namespace\n\n  player.ads = getAds(player);\n  player.ads.settings = settings; // Set the stitched ads state. This needs to happen before the `_state` is\n  // initialized below - BeforePreroll needs to know whether contrib-ads is\n  // playing stitched ads or not.\n  // The setter is deprecated, so this does not use it.\n  // But first, cast to boolean.\n\n  settings.stitchedAds = !!settings.stitchedAds;\n\n  if (settings.stitchedAds) {\n    player.ads._state = new (States.getState('StitchedContentPlayback'))(player);\n  } else {\n    player.ads._state = new (States.getState('BeforePreroll'))(player);\n  }\n\n  player.ads._state.init(player);\n\n  player.ads.cueTextTracks = cueTextTracks;\n  player.ads.adMacroReplacement = adMacroReplacement.bind(player); // Start sending contentupdate and contentchanged events for this player\n\n  initializeContentupdate(player); // Global contentchanged handler for resetting plugin state\n\n  player.on('contentchanged', player.ads.reset); // A utility method for textTrackChangeHandler to define the conditions\n  // when text tracks should be disabled.\n  // Currently this includes:\n  //  - on iOS with native text tracks, during an ad playing\n\n  var shouldDisableTracks = function shouldDisableTracks() {\n    // If the platform matches iOS with native text tracks\n    // and this occurs during ad playback, we should disable tracks again.\n    // If shouldPlayContentBehindAd, no special handling is needed.\n    return !player.ads.shouldPlayContentBehindAd(player) && player.ads.inAdBreak() && player.tech_.featuresNativeTextTracks && videojs.browser.IS_IOS && // older versions of video.js did not use an emulated textTrackList\n    !Array.isArray(player.textTracks());\n  };\n  /*\n   * iOS Safari will change caption mode to 'showing' if a user previously\n   * turned captions on manually for that video source, so this TextTrackList\n   * 'change' event handler will re-disable them in case that occurs during ad playback\n   */\n\n\n  var textTrackChangeHandler = function textTrackChangeHandler() {\n    var textTrackList = player.textTracks();\n\n    if (shouldDisableTracks()) {\n      // We must double check all tracks\n      for (var i = 0; i < textTrackList.length; i++) {\n        var track = textTrackList[i];\n\n        if (track.mode === 'showing') {\n          track.mode = 'disabled';\n        }\n      }\n    }\n  }; // Add the listener to the text track list\n\n\n  player.ready(function () {\n    player.textTracks().addEventListener('change', textTrackChangeHandler);\n  }); // Event handling for the current state.\n\n  player.on(['play', 'playing', 'ended', 'adsready', 'adscanceled', 'adskip', 'adserror', 'adtimeout', 'adended', 'ads-ad-started', 'contentchanged', 'dispose', 'contentresumed', 'readyforpostroll', 'nopreroll', 'nopostroll'], function (e) {\n    player.ads._state.handleEvent(e.type);\n  }); // Clear timeouts and handlers when player is disposed\n\n  player.on('dispose', function () {\n    player.ads.reset();\n    player.textTracks().removeEventListener('change', textTrackChangeHandler);\n  }); // Listen to TCF changes\n\n  listenToTcf(); // Can be called for testing, or if the TCF CMP has loaded late\n\n  player.ads.listenToTcf = listenToTcf;\n}; // Expose the contrib-ads version before it is initialized. Will be replaced\n// after initialization in ads.js\n\n\ncontribAdsPlugin.VERSION = version; // Attempt to register the plugin, if we can.\n\nregister(contribAdsPlugin);\n\nexport default contribAdsPlugin;\n", "import d from \"./node_modules/videojs-contrib-ads/dist/videojs-contrib-ads.es.js\";export default d;"],
  "mappings": "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",
  "names": ["cancelEvent", "prefixEvent", "handlePlaying", "handleEnded", "handleLoadEvent", "handlePlay", "checkSrc", "proxyTcfApi", "window", "version", "listenToTcf", "uriEncodeIfNeeded", "customFields", "defaults", "defaultVal", "document", "setModeAndProcess", "cueAlreadySeen", "setCueAlreadySeen", "hasAdsPlugin", "contribAdsPlugin", "States", "State", "AdState", "ContentPlayback", "ContentState", "BeforePreroll", "Preroll", "AdsDone", "callback", "restoreTracks", "resume", "playPromise", "tryToResume", "Midroll", "Postroll", "StitchedContentPlayback", "StitchedAdRoll", "shouldDisableTracks", "textTrackChangeHandler"]
}
