import {
  video_es_default
} from "./chunk-UM2NEVYN.js";
import "./chunk-J43GMYXM.js";

// node_modules/videojs-ima/dist/videojs.ima.es.js
var PlayerWrapper = function(player, adsPluginSettings, controller) {
  this.vjsPlayer = player;
  this.controller = controller;
  this.contentTrackingTimer = null;
  this.contentComplete = false;
  this.updateTimeIntervalHandle = null;
  this.updateTimeInterval = 1e3;
  this.seekCheckIntervalHandle = null;
  this.seekCheckInterval = 1e3;
  this.resizeCheckIntervalHandle = null;
  this.resizeCheckInterval = 250;
  this.seekThreshold = 100;
  this.contentEndedListeners = [];
  this.contentSource = "";
  this.contentSourceType = "";
  this.contentPlayheadTracker = {
    currentTime: 0,
    previousTime: 0,
    seeking: false,
    duration: 0
  };
  this.vjsPlayerDimensions = {
    width: this.getPlayerWidth(),
    height: this.getPlayerHeight()
  };
  this.vjsControls = this.vjsPlayer.getChild("controlBar");
  this.h5Player = null;
  this.vjsPlayer.one("play", this.setUpPlayerIntervals.bind(this));
  this.boundContentEndedListener = this.localContentEndedListener.bind(this);
  this.vjsPlayer.on("contentended", this.boundContentEndedListener);
  this.vjsPlayer.on("dispose", this.playerDisposedListener.bind(this));
  this.vjsPlayer.on("readyforpreroll", this.onReadyForPreroll.bind(this));
  this.vjsPlayer.on("adtimeout", this.onAdTimeout.bind(this));
  this.vjsPlayer.ready(this.onPlayerReady.bind(this));
  if (this.controller.getSettings().requestMode === "onPlay") {
    this.vjsPlayer.one("play", this.controller.requestAds.bind(this.controller));
  }
  this.vjsPlayer.ads(adsPluginSettings);
};
PlayerWrapper.prototype.setUpPlayerIntervals = function() {
  this.updateTimeIntervalHandle = setInterval(this.updateCurrentTime.bind(this), this.updateTimeInterval);
  this.seekCheckIntervalHandle = setInterval(this.checkForSeeking.bind(this), this.seekCheckInterval);
  this.resizeCheckIntervalHandle = setInterval(this.checkForResize.bind(this), this.resizeCheckInterval);
};
PlayerWrapper.prototype.updateCurrentTime = function() {
  if (!this.contentPlayheadTracker.seeking) {
    this.contentPlayheadTracker.currentTime = this.vjsPlayer.currentTime();
  }
};
PlayerWrapper.prototype.checkForSeeking = function() {
  const tempCurrentTime = this.vjsPlayer.currentTime();
  const diff = (tempCurrentTime - this.contentPlayheadTracker.previousTime) * 1e3;
  if (Math.abs(diff) > this.seekCheckInterval + this.seekThreshold) {
    this.contentPlayheadTracker.seeking = true;
  } else {
    this.contentPlayheadTracker.seeking = false;
  }
  this.contentPlayheadTracker.previousTime = this.vjsPlayer.currentTime();
};
PlayerWrapper.prototype.checkForResize = function() {
  const currentWidth = this.getPlayerWidth();
  const currentHeight = this.getPlayerHeight();
  if (currentWidth != this.vjsPlayerDimensions.width || currentHeight != this.vjsPlayerDimensions.height) {
    this.vjsPlayerDimensions.width = currentWidth;
    this.vjsPlayerDimensions.height = currentHeight;
    this.controller.onPlayerResize(currentWidth, currentHeight);
  }
};
PlayerWrapper.prototype.localContentEndedListener = function() {
  if (!this.contentComplete) {
    this.contentComplete = true;
    this.controller.onContentComplete();
  }
  for (let index in this.contentEndedListeners) {
    if (typeof this.contentEndedListeners[index] === "function") {
      this.contentEndedListeners[index]();
    }
  }
  clearInterval(this.updateTimeIntervalHandle);
  clearInterval(this.seekCheckIntervalHandle);
  clearInterval(this.resizeCheckIntervalHandle);
  if (this.vjsPlayer.el()) {
    this.vjsPlayer.one("play", this.setUpPlayerIntervals.bind(this));
  }
};
PlayerWrapper.prototype.onNoPostroll = function() {
  this.vjsPlayer.trigger("nopostroll");
};
PlayerWrapper.prototype.playerDisposedListener = function() {
  this.contentEndedListeners = [];
  this.controller.onPlayerDisposed();
  this.contentComplete = true;
  this.vjsPlayer.off("contentended", this.boundContentEndedListener);
  if (this.vjsPlayer.ads.adTimeoutTimeout) {
    clearTimeout(this.vjsPlayer.ads.adTimeoutTimeout);
  }
  const intervalsToClear = [this.updateTimeIntervalHandle, this.seekCheckIntervalHandle, this.resizeCheckIntervalHandle];
  for (let index in intervalsToClear) {
    if (intervalsToClear[index]) {
      clearInterval(intervalsToClear[index]);
    }
  }
};
PlayerWrapper.prototype.onReadyForPreroll = function() {
  this.controller.onPlayerReadyForPreroll();
};
PlayerWrapper.prototype.onAdTimeout = function() {
  this.controller.onAdTimeout();
};
PlayerWrapper.prototype.onPlayerReady = function() {
  this.h5Player = document.getElementById(this.getPlayerId()).getElementsByClassName("vjs-tech")[0];
  if (this.h5Player.hasAttribute("autoplay")) {
    this.controller.setSetting("adWillAutoPlay", true);
  }
  this.onVolumeChange();
  this.vjsPlayer.on("fullscreenchange", this.onFullscreenChange.bind(this));
  this.vjsPlayer.on("volumechange", this.onVolumeChange.bind(this));
  this.controller.onPlayerReady();
};
PlayerWrapper.prototype.onFullscreenChange = function() {
  if (this.vjsPlayer.isFullscreen()) {
    this.controller.onPlayerEnterFullscreen();
  } else {
    this.controller.onPlayerExitFullscreen();
  }
};
PlayerWrapper.prototype.onVolumeChange = function() {
  const newVolume = this.vjsPlayer.muted() ? 0 : this.vjsPlayer.volume();
  this.controller.onPlayerVolumeChanged(newVolume);
};
PlayerWrapper.prototype.injectAdContainerDiv = function(adContainerDiv) {
  this.vjsControls.el().parentNode.appendChild(adContainerDiv);
};
PlayerWrapper.prototype.getContentPlayer = function() {
  return this.h5Player;
};
PlayerWrapper.prototype.getVolume = function() {
  return this.vjsPlayer.muted() ? 0 : this.vjsPlayer.volume();
};
PlayerWrapper.prototype.setVolume = function(volume) {
  this.vjsPlayer.volume(volume);
  if (volume == 0) {
    this.vjsPlayer.muted(true);
  } else {
    this.vjsPlayer.muted(false);
  }
};
PlayerWrapper.prototype.unmute = function() {
  this.vjsPlayer.muted(false);
};
PlayerWrapper.prototype.mute = function() {
  this.vjsPlayer.muted(true);
};
PlayerWrapper.prototype.play = function() {
  this.vjsPlayer.play();
};
PlayerWrapper.prototype.togglePlayback = function() {
  if (this.vjsPlayer.paused()) {
    this.vjsPlayer.play();
  } else {
    this.vjsPlayer.pause();
  }
};
PlayerWrapper.prototype.getPlayerWidth = function() {
  let width = (getComputedStyle(this.vjsPlayer.el()) || {}).width;
  if (!width || parseFloat(width) === 0) {
    width = (this.vjsPlayer.el().getBoundingClientRect() || {}).width;
  }
  return parseFloat(width) || this.vjsPlayer.width();
};
PlayerWrapper.prototype.getPlayerHeight = function() {
  let height = (getComputedStyle(this.vjsPlayer.el()) || {}).height;
  if (!height || parseFloat(height) === 0) {
    height = (this.vjsPlayer.el().getBoundingClientRect() || {}).height;
  }
  return parseFloat(height) || this.vjsPlayer.height();
};
PlayerWrapper.prototype.getPlayerOptions = function() {
  return this.vjsPlayer.options_;
};
PlayerWrapper.prototype.getPlayerId = function() {
  return this.vjsPlayer.id();
};
PlayerWrapper.prototype.toggleFullscreen = function() {
  if (this.vjsPlayer.isFullscreen()) {
    this.vjsPlayer.exitFullscreen();
  } else {
    this.vjsPlayer.requestFullscreen();
  }
};
PlayerWrapper.prototype.getContentPlayheadTracker = function() {
  return this.contentPlayheadTracker;
};
PlayerWrapper.prototype.onAdError = function(adErrorEvent) {
  this.vjsControls.show();
  const errorMessage = adErrorEvent.getError !== void 0 ? adErrorEvent.getError() : adErrorEvent.stack;
  this.vjsPlayer.trigger({ type: "adserror", data: {
    AdError: errorMessage,
    AdErrorEvent: adErrorEvent
  } });
};
PlayerWrapper.prototype.onAdLog = function(adEvent) {
  const adData = adEvent.getAdData();
  const errorMessage = adData["adError"] !== void 0 ? adData["adError"].getMessage() : void 0;
  this.vjsPlayer.trigger({ type: "adslog", data: {
    AdError: errorMessage,
    AdEvent: adEvent
  } });
};
PlayerWrapper.prototype.onAdBreakStart = function() {
  this.contentSource = this.vjsPlayer.currentSrc();
  this.contentSourceType = this.vjsPlayer.currentType();
  this.vjsPlayer.off("contentended", this.boundContentEndedListener);
  this.vjsPlayer.ads.startLinearAdMode();
  this.vjsControls.hide();
  this.vjsPlayer.pause();
};
PlayerWrapper.prototype.onAdBreakEnd = function() {
  this.vjsPlayer.on("contentended", this.boundContentEndedListener);
  if (this.vjsPlayer.ads.inAdBreak()) {
    this.vjsPlayer.ads.endLinearAdMode();
  }
  this.vjsControls.show();
};
PlayerWrapper.prototype.onAdStart = function() {
  this.vjsPlayer.trigger("ads-ad-started");
};
PlayerWrapper.prototype.onAllAdsCompleted = function() {
  if (this.contentComplete == true) {
    if (this.contentSource && this.vjsPlayer.currentSrc() != this.contentSource) {
      this.vjsPlayer.src({
        src: this.contentSource,
        type: this.contentSourceType
      });
    }
    this.controller.onContentAndAdsCompleted();
  }
};
PlayerWrapper.prototype.onAdsReady = function() {
  this.vjsPlayer.trigger("adsready");
};
PlayerWrapper.prototype.changeSource = function(contentSrc) {
  if (this.vjsPlayer.currentSrc()) {
    this.vjsPlayer.currentTime(0);
    this.vjsPlayer.pause();
  }
  if (contentSrc) {
    this.vjsPlayer.src(contentSrc);
  }
  this.vjsPlayer.one("loadedmetadata", this.seekContentToZero.bind(this));
};
PlayerWrapper.prototype.seekContentToZero = function() {
  this.vjsPlayer.currentTime(0);
};
PlayerWrapper.prototype.triggerPlayerEvent = function(name2, data) {
  this.vjsPlayer.trigger(name2, data);
};
PlayerWrapper.prototype.addContentEndedListener = function(listener) {
  this.contentEndedListeners.push(listener);
};
PlayerWrapper.prototype.reset = function() {
  this.vjsPlayer.off("contentended", this.boundContentEndedListener);
  this.vjsPlayer.on("contentended", this.boundContentEndedListener);
  this.vjsControls.show();
  if (this.vjsPlayer.ads.inAdBreak()) {
    this.vjsPlayer.ads.endLinearAdMode();
  }
  this.contentPlayheadTracker.currentTime = 0;
  this.contentComplete = false;
};
var AdUi = function(controller) {
  this.controller = controller;
  this.adContainerDiv = document.createElement("div");
  this.controlsDiv = document.createElement("div");
  this.countdownDiv = document.createElement("div");
  this.seekBarDiv = document.createElement("div");
  this.progressDiv = document.createElement("div");
  this.playPauseDiv = document.createElement("div");
  this.muteDiv = document.createElement("div");
  this.sliderDiv = document.createElement("div");
  this.sliderLevelDiv = document.createElement("div");
  this.fullscreenDiv = document.createElement("div");
  this.boundOnMouseUp = this.onMouseUp.bind(this);
  this.boundOnMouseMove = this.onMouseMove.bind(this);
  this.adPlayheadTracker = {
    "currentTime": 0,
    "duration": 0,
    "isPod": false,
    "adPosition": 0,
    "totalAds": 0
  };
  this.controlPrefix = this.controller.getPlayerId() + "_";
  this.showCountdown = true;
  if (this.controller.getSettings().showCountdown === false) {
    this.showCountdown = false;
  }
  this.isAdNonlinear = false;
  this.createAdContainer();
};
AdUi.prototype.createAdContainer = function() {
  this.assignControlAttributes(this.adContainerDiv, "ima-ad-container");
  this.adContainerDiv.style.position = "absolute";
  this.adContainerDiv.style.zIndex = 1111;
  this.adContainerDiv.addEventListener("mouseenter", this.showAdControls.bind(this), false);
  this.adContainerDiv.addEventListener("mouseleave", this.hideAdControls.bind(this), false);
  this.adContainerDiv.addEventListener("click", this.onAdContainerClick.bind(this), false);
  this.createControls();
  this.controller.injectAdContainerDiv(this.adContainerDiv);
};
AdUi.prototype.createControls = function() {
  this.assignControlAttributes(this.controlsDiv, "ima-controls-div");
  this.controlsDiv.style.width = "100%";
  if (!this.controller.getIsMobile()) {
    this.assignControlAttributes(this.countdownDiv, "ima-countdown-div");
    this.countdownDiv.innerHTML = this.controller.getSettings().adLabel;
    this.countdownDiv.style.display = this.showCountdown ? "block" : "none";
  } else {
    this.countdownDiv.style.display = "none";
  }
  this.assignControlAttributes(this.seekBarDiv, "ima-seek-bar-div");
  this.seekBarDiv.style.width = "100%";
  this.assignControlAttributes(this.progressDiv, "ima-progress-div");
  this.assignControlAttributes(this.playPauseDiv, "ima-play-pause-div");
  this.addClass(this.playPauseDiv, "ima-playing");
  this.playPauseDiv.addEventListener("click", this.onAdPlayPauseClick.bind(this), false);
  this.assignControlAttributes(this.muteDiv, "ima-mute-div");
  this.addClass(this.muteDiv, "ima-non-muted");
  this.muteDiv.addEventListener("click", this.onAdMuteClick.bind(this), false);
  this.assignControlAttributes(this.sliderDiv, "ima-slider-div");
  this.sliderDiv.addEventListener("mousedown", this.onAdVolumeSliderMouseDown.bind(this), false);
  if (this.controller.getIsIos()) {
    this.sliderDiv.style.display = "none";
  }
  this.assignControlAttributes(this.sliderLevelDiv, "ima-slider-level-div");
  this.assignControlAttributes(this.fullscreenDiv, "ima-fullscreen-div");
  this.addClass(this.fullscreenDiv, "ima-non-fullscreen");
  this.fullscreenDiv.addEventListener("click", this.onAdFullscreenClick.bind(this), false);
  this.adContainerDiv.appendChild(this.controlsDiv);
  this.controlsDiv.appendChild(this.countdownDiv);
  this.controlsDiv.appendChild(this.seekBarDiv);
  this.controlsDiv.appendChild(this.playPauseDiv);
  this.controlsDiv.appendChild(this.muteDiv);
  this.controlsDiv.appendChild(this.sliderDiv);
  this.controlsDiv.appendChild(this.fullscreenDiv);
  this.seekBarDiv.appendChild(this.progressDiv);
  this.sliderDiv.appendChild(this.sliderLevelDiv);
};
AdUi.prototype.onAdPlayPauseClick = function() {
  this.controller.onAdPlayPauseClick();
};
AdUi.prototype.onAdMuteClick = function() {
  this.controller.onAdMuteClick();
};
AdUi.prototype.onAdFullscreenClick = function() {
  this.controller.toggleFullscreen();
};
AdUi.prototype.onAdsPaused = function() {
  this.controller.sdkImpl.adPlaying = false;
  this.addClass(this.playPauseDiv, "ima-paused");
  this.removeClass(this.playPauseDiv, "ima-playing");
  this.showAdControls();
};
AdUi.prototype.onAdsResumed = function() {
  this.onAdsPlaying();
  this.showAdControls();
};
AdUi.prototype.onAdsPlaying = function() {
  this.controller.sdkImpl.adPlaying = true;
  this.addClass(this.playPauseDiv, "ima-playing");
  this.removeClass(this.playPauseDiv, "ima-paused");
};
AdUi.prototype.updateAdUi = function(currentTime, remainingTime, duration, adPosition, totalAds) {
  const remainingMinutes = Math.floor(remainingTime / 60);
  let remainingSeconds = Math.floor(remainingTime % 60);
  if (remainingSeconds.toString().length < 2) {
    remainingSeconds = "0" + remainingSeconds;
  }
  let podCount = ": ";
  if (totalAds > 1) {
    podCount = " (" + adPosition + " " + this.controller.getSettings().adLabelNofN + " " + totalAds + "): ";
  }
  this.countdownDiv.innerHTML = this.controller.getSettings().adLabel + podCount + remainingMinutes + ":" + remainingSeconds;
  const playProgressRatio = currentTime / duration;
  const playProgressPercent = playProgressRatio * 100;
  this.progressDiv.style.width = playProgressPercent + "%";
};
AdUi.prototype.unmute = function() {
  this.addClass(this.muteDiv, "ima-non-muted");
  this.removeClass(this.muteDiv, "ima-muted");
  this.sliderLevelDiv.style.width = this.controller.getPlayerVolume() * 100 + "%";
};
AdUi.prototype.mute = function() {
  this.addClass(this.muteDiv, "ima-muted");
  this.removeClass(this.muteDiv, "ima-non-muted");
  this.sliderLevelDiv.style.width = "0%";
};
AdUi.prototype.onAdVolumeSliderMouseDown = function() {
  document.addEventListener("mouseup", this.boundOnMouseUp, false);
  document.addEventListener("mousemove", this.boundOnMouseMove, false);
};
AdUi.prototype.onMouseMove = function(event) {
  this.changeVolume(event);
};
AdUi.prototype.onMouseUp = function(event) {
  this.changeVolume(event);
  document.removeEventListener("mouseup", this.boundOnMouseUp);
  document.removeEventListener("mousemove", this.boundOnMouseMove);
};
AdUi.prototype.changeVolume = function(event) {
  let percent = (event.clientX - this.sliderDiv.getBoundingClientRect().left) / this.sliderDiv.offsetWidth;
  percent *= 100;
  percent = Math.min(Math.max(percent, 0), 100);
  this.sliderLevelDiv.style.width = percent + "%";
  if (this.percent == 0) {
    this.addClass(this.muteDiv, "ima-muted");
    this.removeClass(this.muteDiv, "ima-non-muted");
  } else {
    this.addClass(this.muteDiv, "ima-non-muted");
    this.removeClass(this.muteDiv, "ima-muted");
  }
  this.controller.setVolume(percent / 100);
};
AdUi.prototype.showAdContainer = function() {
  this.adContainerDiv.style.display = "block";
};
AdUi.prototype.hideAdContainer = function() {
  this.adContainerDiv.style.display = "none";
};
AdUi.prototype.onAdContainerClick = function() {
  if (this.isAdNonlinear) {
    this.controller.togglePlayback();
  }
};
AdUi.prototype.reset = function() {
  this.hideAdContainer();
};
AdUi.prototype.onAdError = function() {
  this.hideAdContainer();
};
AdUi.prototype.onAdBreakStart = function(adEvent) {
  this.showAdContainer();
  const contentType = adEvent.getAd().getContentType();
  if (contentType === "application/javascript" && !this.controller.getSettings().showControlsForJSAds) {
    this.controlsDiv.style.display = "none";
  } else {
    this.controlsDiv.style.display = "block";
  }
  this.onAdsPlaying();
  this.hideAdControls();
};
AdUi.prototype.onAdBreakEnd = function() {
  const currentAd = this.controller.getCurrentAd();
  if (currentAd == null || currentAd.isLinear()) {
    this.hideAdContainer();
  }
  this.controlsDiv.style.display = "none";
  this.countdownDiv.innerHTML = "";
};
AdUi.prototype.onAllAdsCompleted = function() {
  this.hideAdContainer();
};
AdUi.prototype.onLinearAdStart = function() {
  this.removeClass(this.adContainerDiv, "bumpable-ima-ad-container");
  this.isAdNonlinear = false;
};
AdUi.prototype.onNonLinearAdLoad = function() {
  this.adContainerDiv.style.display = "block";
  this.addClass(this.adContainerDiv, "bumpable-ima-ad-container");
  this.isAdNonlinear = true;
};
AdUi.prototype.onPlayerEnterFullscreen = function() {
  this.addClass(this.fullscreenDiv, "ima-fullscreen");
  this.removeClass(this.fullscreenDiv, "ima-non-fullscreen");
};
AdUi.prototype.onPlayerExitFullscreen = function() {
  this.addClass(this.fullscreenDiv, "ima-non-fullscreen");
  this.removeClass(this.fullscreenDiv, "ima-fullscreen");
};
AdUi.prototype.onPlayerVolumeChanged = function(volume) {
  if (volume == 0) {
    this.addClass(this.muteDiv, "ima-muted");
    this.removeClass(this.muteDiv, "ima-non-muted");
    this.sliderLevelDiv.style.width = "0%";
  } else {
    this.addClass(this.muteDiv, "ima-non-muted");
    this.removeClass(this.muteDiv, "ima-muted");
    this.sliderLevelDiv.style.width = volume * 100 + "%";
  }
};
AdUi.prototype.showAdControls = function() {
  const { disableAdControls } = this.controller.getSettings();
  if (!disableAdControls) {
    this.addClass(this.controlsDiv, "ima-controls-div-showing");
  }
};
AdUi.prototype.hideAdControls = function() {
  this.removeClass(this.controlsDiv, "ima-controls-div-showing");
};
AdUi.prototype.assignControlAttributes = function(element, controlName) {
  element.id = this.controlPrefix + controlName;
  element.className = this.controlPrefix + controlName + " " + controlName;
};
AdUi.prototype.getClassRegexp = function(className) {
  return new RegExp("(^|[^A-Za-z-])" + className + "((?![A-Za-z-])|$)", "gi");
};
AdUi.prototype.elementHasClass = function(element, className) {
  const classRegexp = this.getClassRegexp(className);
  return classRegexp.test(element.className);
};
AdUi.prototype.addClass = function(element, classToAdd) {
  element.className = element.className.trim() + " " + classToAdd;
};
AdUi.prototype.removeClass = function(element, classToRemove) {
  const classRegexp = this.getClassRegexp(classToRemove);
  element.className = element.className.trim().replace(classRegexp, "");
};
AdUi.prototype.getAdContainerDiv = function() {
  return this.adContainerDiv;
};
AdUi.prototype.setShowCountdown = function(showCountdownIn) {
  this.showCountdown = showCountdownIn;
  this.countdownDiv.style.display = this.showCountdown ? "block" : "none";
};
var name = "videojs-ima";
var version = "1.11.0";
var license = "Apache-2.0";
var main = "./dist/videojs.ima.js";
var module$1 = "./dist/videojs.ima.es.js";
var author = { "name": "Google Inc." };
var engines = { "node": ">=0.8.0" };
var scripts = { "contBuild": "watch 'npm run rollup:max' src", "predevServer": 'echo "Starting up server on localhost:8000."', "devServer": "npm-run-all -p testServer contBuild", "lint": 'eslint "src/**/*.js"', "rollup": "npm-run-all rollup:*", "rollup:max": "rollup -c configs/rollup.config.js", "rollup:es": "rollup -c configs/rollup.config.es.js", "rollup:min": "rollup -c configs/rollup.config.min.js", "pretest": "npm run rollup", "start": "npm run devServer", "test": "npm-run-all test:*", "test:vjs6": "npm install video.js@6 --no-save && npm-run-all -p -r testServer webdriver", "test:vjs7": "npm install video.js@7 --no-save && npm-run-all -p -r testServer webdriver", "testServer": "http-server --cors -p 8000 --silent", "preversion": "node scripts/preversion.js && npm run lint && npm test", "version": "node scripts/version.js", "postversion": "node scripts/postversion.js", "webdriver": "mocha test/webdriver/*.js --no-timeouts" };
var repository = { "type": "git", "url": "https://github.com/googleads/videojs-ima" };
var files = ["CHANGELOG.md", "LICENSE", "README.md", "dist/", "src/"];
var peerDependencies = { "video.js": "^5.19.2 || ^6 || ^7" };
var dependencies = { "@hapi/cryptiles": "^5.1.0", "can-autoplay": "^3.0.2", "extend": ">=3.0.2", "videojs-contrib-ads": "^6.9.0" };
var devDependencies = { "axios": "^0.25.0", "babel-core": "^6.26.3", "babel-preset-env": "^1.7.0", "child_process": "^1.0.2", "chromedriver": "^102.0.0", "conventional-changelog-cli": "^2.2.2", "conventional-changelog-videojs": "^3.0.2", "ecstatic": "^4.1.4", "eslint": "^8.8.0", "eslint-config-google": "^0.9.1", "eslint-plugin-jsdoc": "^3.15.1", "geckodriver": "^2.0.4", "http-server": "^14.1.0", "ini": ">=1.3.7", "mocha": "^9.2.0", "npm-run-all": "^4.1.5", "path": "^0.12.7", "protractor": "^7.0.0", "rimraf": "^2.7.1", "rollup": "^0.51.8", "rollup-plugin-babel": "^3.0.7", "rollup-plugin-copy": "^0.2.3", "rollup-plugin-json": "^2.3.1", "rollup-plugin-uglify": "^2.0.1", "selenium-webdriver": "^3.6.0", "uglify-es": "^3.3.9", "video.js": "^7.17.0", "watch": "^0.13.0", "webdriver-manager": "^12.1.7", "xmldom": "^0.6.0" };
var keywords = ["videojs", "videojs-plugin"];
var pkg = {
  name,
  version,
  license,
  main,
  module: module$1,
  author,
  engines,
  scripts,
  repository,
  files,
  peerDependencies,
  dependencies,
  devDependencies,
  keywords
};
var SdkImpl = function(controller) {
  this.controller = controller;
  this.adDisplayContainer = null;
  this.adDisplayContainerInitialized = false;
  this.adsLoader = null;
  this.adsManager = null;
  this.adsRenderingSettings = null;
  this.adsResponse = null;
  this.currentAd = null;
  this.adTrackingTimer = null;
  this.allAdsCompleted = false;
  this.adsActive = false;
  this.adPlaying = false;
  this.adMuted = false;
  this.adBreakReadyListener = void 0;
  this.contentCompleteCalled = false;
  this.isAdTimedOut = false;
  this.adsManagerDimensions = {
    width: 0,
    height: 0
  };
  this.autoPlayAdBreaks = true;
  if (this.controller.getSettings().autoPlayAdBreaks === false) {
    this.autoPlayAdBreaks = false;
  }
  if (this.controller.getSettings().locale) {
    google.ima.settings.setLocale(this.controller.getSettings().locale);
  }
  if (this.controller.getSettings().disableFlashAds) {
    google.ima.settings.setDisableFlashAds(this.controller.getSettings().disableFlashAds);
  }
  if (this.controller.getSettings().disableCustomPlaybackForIOS10Plus) {
    google.ima.settings.setDisableCustomPlaybackForIOS10Plus(this.controller.getSettings().disableCustomPlaybackForIOS10Plus);
  }
  if (this.controller.getSettings().ppid) {
    google.ima.settings.setPpid(this.controller.getSettings().ppid);
  }
  if (this.controller.getSettings().featureFlags) {
    google.ima.settings.setFeatureFlags(this.controller.getSettings().featureFlags);
  }
};
SdkImpl.prototype.initAdObjects = function() {
  this.adDisplayContainer = new google.ima.AdDisplayContainer(this.controller.getAdContainerDiv(), this.controller.getContentPlayer());
  this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);
  this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED);
  if (this.controller.getSettings().vpaidAllowed == false) {
    this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.DISABLED);
  }
  if (this.controller.getSettings().vpaidMode !== void 0) {
    this.adsLoader.getSettings().setVpaidMode(this.controller.getSettings().vpaidMode);
  }
  if (this.controller.getSettings().locale) {
    this.adsLoader.getSettings().setLocale(this.controller.getSettings().locale);
  }
  if (this.controller.getSettings().numRedirects) {
    this.adsLoader.getSettings().setNumRedirects(this.controller.getSettings().numRedirects);
  }
  if (this.controller.getSettings().sessionId) {
    this.adsLoader.getSettings().setSessionId(this.controller.getSettings().sessionId);
  }
  this.adsLoader.getSettings().setPlayerType("videojs-ima");
  this.adsLoader.getSettings().setPlayerVersion(pkg.version);
  this.adsLoader.getSettings().setAutoPlayAdBreaks(this.autoPlayAdBreaks);
  this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);
  this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdsLoaderError.bind(this), false);
  this.controller.playerWrapper.vjsPlayer.trigger({
    type: "ads-loader",
    adsLoader: this.adsLoader
  });
};
SdkImpl.prototype.requestAds = function() {
  const adsRequest = new google.ima.AdsRequest();
  if (this.controller.getSettings().adTagUrl) {
    adsRequest.adTagUrl = this.controller.getSettings().adTagUrl;
  } else {
    adsRequest.adsResponse = this.controller.getSettings().adsResponse;
  }
  if (this.controller.getSettings().forceNonLinearFullSlot) {
    adsRequest.forceNonLinearFullSlot = true;
  }
  if (this.controller.getSettings().vastLoadTimeout) {
    adsRequest.vastLoadTimeout = this.controller.getSettings().vastLoadTimeout;
  }
  if (this.controller.getSettings().omidMode) {
    adsRequest.omidAccessModeRules = {};
    const omidValues = this.controller.getSettings().omidMode;
    if (omidValues.FULL) {
      adsRequest.omidAccessModeRules[google.ima.OmidAccessMode.FULL] = omidValues.FULL;
    }
    if (omidValues.DOMAIN) {
      adsRequest.omidAccessModeRules[google.ima.OmidAccessMode.DOMAIN] = omidValues.DOMAIN;
    }
    if (omidValues.LIMITED) {
      adsRequest.omidAccessModeRules[google.ima.OmidAccessMode.LIMITED] = omidValues.LIMITED;
    }
  }
  adsRequest.linearAdSlotWidth = this.controller.getPlayerWidth();
  adsRequest.linearAdSlotHeight = this.controller.getPlayerHeight();
  adsRequest.nonLinearAdSlotWidth = this.controller.getSettings().nonLinearWidth || this.controller.getPlayerWidth();
  adsRequest.nonLinearAdSlotHeight = this.controller.getSettings().nonLinearHeight || this.controller.getPlayerHeight();
  adsRequest.setAdWillAutoPlay(this.controller.adsWillAutoplay());
  adsRequest.setAdWillPlayMuted(this.controller.adsWillPlayMuted());
  let providedAdsRequest = this.controller.getSettings().adsRequest;
  if (providedAdsRequest && typeof providedAdsRequest === "object") {
    Object.keys(providedAdsRequest).forEach((key) => {
      adsRequest[key] = providedAdsRequest[key];
    });
  }
  this.adsLoader.requestAds(adsRequest);
  this.controller.playerWrapper.vjsPlayer.trigger({
    type: "ads-request",
    AdsRequest: adsRequest
  });
};
SdkImpl.prototype.onAdsManagerLoaded = function(adsManagerLoadedEvent) {
  this.createAdsRenderingSettings();
  this.adsManager = adsManagerLoadedEvent.getAdsManager(this.controller.getContentPlayheadTracker(), this.adsRenderingSettings);
  this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY, this.onAdBreakReady.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.onAllAdsCompleted.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED, this.onAdLoaded.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, this.onAdStarted.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this.onAdComplete.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED, this.onAdComplete.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.LOG, this.onAdLog.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.PAUSED, this.onAdPaused.bind(this));
  this.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED, this.onAdResumed.bind(this));
  this.controller.playerWrapper.vjsPlayer.trigger({
    type: "ads-manager",
    adsManager: this.adsManager
  });
  if (!this.autoPlayAdBreaks) {
    this.initAdsManager();
  }
  const { preventLateAdStart } = this.controller.getSettings();
  if (!preventLateAdStart) {
    this.controller.onAdsReady();
  } else if (preventLateAdStart && !this.isAdTimedOut) {
    this.controller.onAdsReady();
  }
  if (this.controller.getSettings().adsManagerLoadedCallback) {
    this.controller.getSettings().adsManagerLoadedCallback();
  }
};
SdkImpl.prototype.onAdsLoaderError = function(event) {
  window.console.warn("AdsLoader error: " + event.getError());
  this.controller.onErrorLoadingAds(event);
  if (this.adsManager) {
    this.adsManager.destroy();
  }
};
SdkImpl.prototype.initAdsManager = function() {
  try {
    const initWidth = this.controller.getPlayerWidth();
    const initHeight = this.controller.getPlayerHeight();
    this.adsManagerDimensions.width = initWidth;
    this.adsManagerDimensions.height = initHeight;
    this.adsManager.init(initWidth, initHeight, google.ima.ViewMode.NORMAL);
    this.adsManager.setVolume(this.controller.getPlayerVolume());
    this.initializeAdDisplayContainer();
  } catch (adError) {
    this.onAdError(adError);
  }
};
SdkImpl.prototype.createAdsRenderingSettings = function() {
  this.adsRenderingSettings = new google.ima.AdsRenderingSettings();
  this.adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;
  if (this.controller.getSettings().adsRenderingSettings) {
    for (let setting in this.controller.getSettings().adsRenderingSettings) {
      if (setting !== "") {
        this.adsRenderingSettings[setting] = this.controller.getSettings().adsRenderingSettings[setting];
      }
    }
  }
};
SdkImpl.prototype.onAdError = function(adErrorEvent) {
  const errorMessage = adErrorEvent.getError !== void 0 ? adErrorEvent.getError() : adErrorEvent.stack;
  window.console.warn("Ad error: " + errorMessage);
  this.adsManager.destroy();
  this.controller.onAdError(adErrorEvent);
  this.adsActive = false;
  this.adPlaying = false;
};
SdkImpl.prototype.onAdBreakReady = function(adEvent) {
  this.adBreakReadyListener(adEvent);
};
SdkImpl.prototype.onContentPauseRequested = function(adEvent) {
  this.adsActive = true;
  this.adPlaying = true;
  this.controller.onAdBreakStart(adEvent);
};
SdkImpl.prototype.onContentResumeRequested = function(adEvent) {
  this.adsActive = false;
  this.adPlaying = false;
  this.controller.onAdBreakEnd();
};
SdkImpl.prototype.onAllAdsCompleted = function(adEvent) {
  this.allAdsCompleted = true;
  this.controller.onAllAdsCompleted();
};
SdkImpl.prototype.onAdLoaded = function(adEvent) {
  if (!adEvent.getAd().isLinear()) {
    this.controller.onNonLinearAdLoad();
    this.controller.playContent();
  }
};
SdkImpl.prototype.onAdStarted = function(adEvent) {
  this.currentAd = adEvent.getAd();
  if (this.currentAd.isLinear()) {
    this.adTrackingTimer = setInterval(this.onAdPlayheadTrackerInterval.bind(this), 250);
    this.controller.onLinearAdStart();
  } else {
    this.controller.onNonLinearAdStart();
  }
};
SdkImpl.prototype.onAdPaused = function() {
  this.controller.onAdsPaused();
};
SdkImpl.prototype.onAdResumed = function(adEvent) {
  this.controller.onAdsResumed();
};
SdkImpl.prototype.onAdComplete = function() {
  if (this.currentAd.isLinear()) {
    clearInterval(this.adTrackingTimer);
  }
};
SdkImpl.prototype.onAdLog = function(adEvent) {
  this.controller.onAdLog(adEvent);
};
SdkImpl.prototype.onAdPlayheadTrackerInterval = function() {
  if (this.adsManager === null)
    return;
  const remainingTime = this.adsManager.getRemainingTime();
  const duration = this.currentAd.getDuration();
  let currentTime = duration - remainingTime;
  currentTime = currentTime > 0 ? currentTime : 0;
  let totalAds = 0;
  let adPosition;
  if (this.currentAd.getAdPodInfo()) {
    adPosition = this.currentAd.getAdPodInfo().getAdPosition();
    totalAds = this.currentAd.getAdPodInfo().getTotalAds();
  }
  this.controller.onAdPlayheadUpdated(currentTime, remainingTime, duration, adPosition, totalAds);
};
SdkImpl.prototype.onContentComplete = function() {
  if (this.adsLoader) {
    this.adsLoader.contentComplete();
    this.contentCompleteCalled = true;
  }
  if (this.adsManager && this.adsManager.getCuePoints() && !this.adsManager.getCuePoints().includes(-1) || !this.adsManager) {
    this.controller.onNoPostroll();
  }
  if (this.allAdsCompleted) {
    this.controller.onContentAndAdsCompleted();
  }
};
SdkImpl.prototype.onPlayerDisposed = function() {
  if (this.adTrackingTimer) {
    clearInterval(this.adTrackingTimer);
  }
  if (this.adsManager) {
    this.adsManager.destroy();
    this.adsManager = null;
  }
};
SdkImpl.prototype.onPlayerReadyForPreroll = function() {
  if (this.autoPlayAdBreaks) {
    this.initAdsManager();
    try {
      this.controller.showAdContainer();
      this.adsManager.setVolume(this.controller.getPlayerVolume());
      this.adsManager.start();
    } catch (adError) {
      this.onAdError(adError);
    }
  }
};
SdkImpl.prototype.onAdTimeout = function() {
  this.isAdTimedOut = true;
};
SdkImpl.prototype.onPlayerReady = function() {
  this.initAdObjects();
  if ((this.controller.getSettings().adTagUrl || this.controller.getSettings().adsResponse) && this.controller.getSettings().requestMode === "onLoad") {
    this.requestAds();
  }
};
SdkImpl.prototype.onPlayerEnterFullscreen = function() {
  if (this.adsManager) {
    this.adsManager.resize(window.screen.width, window.screen.height, google.ima.ViewMode.FULLSCREEN);
  }
};
SdkImpl.prototype.onPlayerExitFullscreen = function() {
  if (this.adsManager) {
    this.adsManager.resize(this.controller.getPlayerWidth(), this.controller.getPlayerHeight(), google.ima.ViewMode.NORMAL);
  }
};
SdkImpl.prototype.onPlayerVolumeChanged = function(volume) {
  if (this.adsManager) {
    this.adsManager.setVolume(volume);
  }
  if (volume == 0) {
    this.adMuted = true;
  } else {
    this.adMuted = false;
  }
};
SdkImpl.prototype.onPlayerResize = function(width, height) {
  if (this.adsManager) {
    this.adsManagerDimensions.width = width;
    this.adsManagerDimensions.height = height;
    this.adsManager.resize(width, height, google.ima.ViewMode.NORMAL);
  }
};
SdkImpl.prototype.getCurrentAd = function() {
  return this.currentAd;
};
SdkImpl.prototype.setAdBreakReadyListener = function(listener) {
  this.adBreakReadyListener = listener;
};
SdkImpl.prototype.isAdPlaying = function() {
  return this.adPlaying;
};
SdkImpl.prototype.isAdMuted = function() {
  return this.adMuted;
};
SdkImpl.prototype.pauseAds = function() {
  this.adsManager.pause();
  this.adPlaying = false;
};
SdkImpl.prototype.resumeAds = function() {
  this.adsManager.resume();
  this.adPlaying = true;
};
SdkImpl.prototype.unmute = function() {
  this.adsManager.setVolume(1);
  this.adMuted = false;
};
SdkImpl.prototype.mute = function() {
  this.adsManager.setVolume(0);
  this.adMuted = true;
};
SdkImpl.prototype.setVolume = function(volume) {
  this.adsManager.setVolume(volume);
  if (volume == 0) {
    this.adMuted = true;
  } else {
    this.adMuted = false;
  }
};
SdkImpl.prototype.initializeAdDisplayContainer = function() {
  if (this.adDisplayContainer) {
    if (!this.adDisplayContainerInitialized) {
      this.adDisplayContainer.initialize();
      this.adDisplayContainerInitialized = true;
    }
  }
};
SdkImpl.prototype.playAdBreak = function() {
  if (!this.autoPlayAdBreaks) {
    this.controller.showAdContainer();
    this.adsManager.setVolume(this.controller.getPlayerVolume());
    this.adsManager.start();
  }
};
SdkImpl.prototype.addEventListener = function(event, callback) {
  if (this.adsManager) {
    this.adsManager.addEventListener(event, callback);
  }
};
SdkImpl.prototype.getAdsManager = function() {
  return this.adsManager;
};
SdkImpl.prototype.reset = function() {
  this.adsActive = false;
  this.adPlaying = false;
  if (this.adTrackingTimer) {
    clearInterval(this.adTrackingTimer);
  }
  if (this.adsManager) {
    this.adsManager.destroy();
    this.adsManager = null;
  }
  if (this.adsLoader && !this.contentCompleteCalled) {
    this.adsLoader.contentComplete();
  }
  this.contentCompleteCalled = false;
  this.allAdsCompleted = false;
};
var Controller = function(player, options) {
  this.settings = {};
  this.contentAndAdsEndedListeners = [];
  this.isMobile = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/Android/i);
  this.isIos = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i);
  this.initWithSettings(options);
  const contribAdsDefaults = {
    debug: this.settings.debug,
    timeout: this.settings.timeout,
    prerollTimeout: this.settings.prerollTimeout
  };
  const adsPluginSettings = Object.assign({}, contribAdsDefaults, options.contribAdsSettings || {});
  this.playerWrapper = new PlayerWrapper(player, adsPluginSettings, this);
  this.adUi = new AdUi(this);
  this.sdkImpl = new SdkImpl(this);
};
Controller.IMA_DEFAULTS = {
  adLabel: "Advertisement",
  adLabelNofN: "of",
  debug: false,
  disableAdControls: false,
  prerollTimeout: 1e3,
  preventLateAdStart: false,
  requestMode: "onLoad",
  showControlsForJSAds: true,
  timeout: 5e3
};
Controller.prototype.initWithSettings = function(options) {
  this.settings = Object.assign({}, Controller.IMA_DEFAULTS, options || {});
  this.warnAboutDeprecatedSettings();
  this.showCountdown = true;
  if (this.settings.showCountdown === false) {
    this.showCountdown = false;
  }
};
Controller.prototype.warnAboutDeprecatedSettings = function() {
  const deprecatedSettings = ["adWillAutoplay", "adsWillAutoplay", "adWillPlayMuted", "adsWillPlayMuted"];
  deprecatedSettings.forEach((setting) => {
    if (this.settings[setting] !== void 0) {
      console.warn("WARNING: videojs.ima setting " + setting + " is deprecated");
    }
  });
};
Controller.prototype.getSettings = function() {
  return this.settings;
};
Controller.prototype.getIsMobile = function() {
  return this.isMobile;
};
Controller.prototype.getIsIos = function() {
  return this.isIos;
};
Controller.prototype.injectAdContainerDiv = function(adContainerDiv) {
  this.playerWrapper.injectAdContainerDiv(adContainerDiv);
};
Controller.prototype.getAdContainerDiv = function() {
  return this.adUi.getAdContainerDiv();
};
Controller.prototype.getContentPlayer = function() {
  return this.playerWrapper.getContentPlayer();
};
Controller.prototype.getContentPlayheadTracker = function() {
  return this.playerWrapper.getContentPlayheadTracker();
};
Controller.prototype.requestAds = function() {
  this.sdkImpl.requestAds();
};
Controller.prototype.setSetting = function(key, value) {
  this.settings[key] = value;
};
Controller.prototype.onErrorLoadingAds = function(adErrorEvent) {
  this.adUi.onAdError();
  this.playerWrapper.onAdError(adErrorEvent);
};
Controller.prototype.onAdPlayPauseClick = function() {
  if (this.sdkImpl.isAdPlaying()) {
    this.adUi.onAdsPaused();
    this.sdkImpl.pauseAds();
  } else {
    this.adUi.onAdsPlaying();
    this.sdkImpl.resumeAds();
  }
};
Controller.prototype.onAdMuteClick = function() {
  if (this.sdkImpl.isAdMuted()) {
    this.playerWrapper.unmute();
    this.adUi.unmute();
    this.sdkImpl.unmute();
  } else {
    this.playerWrapper.mute();
    this.adUi.mute();
    this.sdkImpl.mute();
  }
};
Controller.prototype.setVolume = function(volume) {
  this.playerWrapper.setVolume(volume);
  this.sdkImpl.setVolume(volume);
};
Controller.prototype.getPlayerVolume = function() {
  return this.playerWrapper.getVolume();
};
Controller.prototype.toggleFullscreen = function() {
  this.playerWrapper.toggleFullscreen();
};
Controller.prototype.onAdError = function(adErrorEvent) {
  this.adUi.onAdError();
  this.playerWrapper.onAdError(adErrorEvent);
};
Controller.prototype.onAdBreakStart = function(adEvent) {
  this.playerWrapper.onAdBreakStart();
  this.adUi.onAdBreakStart(adEvent);
};
Controller.prototype.showAdContainer = function() {
  this.adUi.showAdContainer();
};
Controller.prototype.onAdBreakEnd = function() {
  this.playerWrapper.onAdBreakEnd();
  this.adUi.onAdBreakEnd();
};
Controller.prototype.onAllAdsCompleted = function() {
  this.adUi.onAllAdsCompleted();
  this.playerWrapper.onAllAdsCompleted();
};
Controller.prototype.onAdsPaused = function() {
  this.adUi.onAdsPaused();
};
Controller.prototype.onAdsResumed = function() {
  this.adUi.onAdsResumed();
};
Controller.prototype.onAdPlayheadUpdated = function(currentTime, remainingTime, duration, adPosition, totalAds) {
  this.adUi.updateAdUi(currentTime, remainingTime, duration, adPosition, totalAds);
};
Controller.prototype.onAdLog = function(adEvent) {
  this.playerWrapper.onAdLog(adEvent);
};
Controller.prototype.getCurrentAd = function() {
  return this.sdkImpl.getCurrentAd();
};
Controller.prototype.playContent = function() {
  this.playerWrapper.play();
};
Controller.prototype.onLinearAdStart = function() {
  this.adUi.onLinearAdStart();
  this.playerWrapper.onAdStart();
};
Controller.prototype.onNonLinearAdLoad = function() {
  this.adUi.onNonLinearAdLoad();
};
Controller.prototype.onNonLinearAdStart = function() {
  this.adUi.onNonLinearAdLoad();
  this.playerWrapper.onAdStart();
};
Controller.prototype.getPlayerWidth = function() {
  return this.playerWrapper.getPlayerWidth();
};
Controller.prototype.getPlayerHeight = function() {
  return this.playerWrapper.getPlayerHeight();
};
Controller.prototype.onAdsReady = function() {
  this.playerWrapper.onAdsReady();
};
Controller.prototype.onPlayerResize = function(width, height) {
  this.sdkImpl.onPlayerResize(width, height);
};
Controller.prototype.onContentComplete = function() {
  this.sdkImpl.onContentComplete();
};
Controller.prototype.onNoPostroll = function() {
  this.playerWrapper.onNoPostroll();
};
Controller.prototype.onContentAndAdsCompleted = function() {
  for (let index in this.contentAndAdsEndedListeners) {
    if (typeof this.contentAndAdsEndedListeners[index] === "function") {
      this.contentAndAdsEndedListeners[index]();
    }
  }
};
Controller.prototype.onPlayerDisposed = function() {
  this.contentAndAdsEndedListeners = [];
  this.sdkImpl.onPlayerDisposed();
};
Controller.prototype.onPlayerReadyForPreroll = function() {
  this.sdkImpl.onPlayerReadyForPreroll();
};
Controller.prototype.onAdTimeout = function() {
  this.sdkImpl.onAdTimeout();
};
Controller.prototype.onPlayerReady = function() {
  this.sdkImpl.onPlayerReady();
};
Controller.prototype.onPlayerEnterFullscreen = function() {
  this.adUi.onPlayerEnterFullscreen();
  this.sdkImpl.onPlayerEnterFullscreen();
};
Controller.prototype.onPlayerExitFullscreen = function() {
  this.adUi.onPlayerExitFullscreen();
  this.sdkImpl.onPlayerExitFullscreen();
};
Controller.prototype.onPlayerVolumeChanged = function(volume) {
  this.adUi.onPlayerVolumeChanged(volume);
  this.sdkImpl.onPlayerVolumeChanged(volume);
};
Controller.prototype.setContentWithAdTag = function(contentSrc, adTag) {
  this.reset();
  this.settings.adTagUrl = adTag ? adTag : this.settings.adTagUrl;
  this.playerWrapper.changeSource(contentSrc);
};
Controller.prototype.setContentWithAdsResponse = function(contentSrc, adsResponse) {
  this.reset();
  this.settings.adsResponse = adsResponse ? adsResponse : this.settings.adsResponse;
  this.playerWrapper.changeSource(contentSrc);
};
Controller.prototype.setContentWithAdsRequest = function(contentSrc, adsRequest) {
  this.reset();
  this.settings.adsRequest = adsRequest ? adsRequest : this.settings.adsRequest;
  this.playerWrapper.changeSource(contentSrc);
};
Controller.prototype.reset = function() {
  this.sdkImpl.reset();
  this.playerWrapper.reset();
  this.adUi.reset();
};
Controller.prototype.addContentEndedListener = function(listener) {
  this.playerWrapper.addContentEndedListener(listener);
};
Controller.prototype.addContentAndAdsEndedListener = function(listener) {
  this.contentAndAdsEndedListeners.push(listener);
};
Controller.prototype.setAdBreakReadyListener = function(listener) {
  this.sdkImpl.setAdBreakReadyListener(listener);
};
Controller.prototype.setShowCountdown = function(showCountdownIn) {
  this.adUi.setShowCountdown(showCountdownIn);
  this.showCountdown = showCountdownIn;
  this.adUi.countdownDiv.style.display = this.showCountdown ? "block" : "none";
};
Controller.prototype.initializeAdDisplayContainer = function() {
  this.sdkImpl.initializeAdDisplayContainer();
};
Controller.prototype.playAdBreak = function() {
  this.sdkImpl.playAdBreak();
};
Controller.prototype.addEventListener = function(event, callback) {
  this.sdkImpl.addEventListener(event, callback);
};
Controller.prototype.getAdsManager = function() {
  return this.sdkImpl.getAdsManager();
};
Controller.prototype.getPlayerId = function() {
  return this.playerWrapper.getPlayerId();
};
Controller.prototype.changeAdTag = function(adTag) {
  this.reset();
  this.settings.adTagUrl = adTag;
};
Controller.prototype.pauseAd = function() {
  this.adUi.onAdsPaused();
  this.sdkImpl.pauseAds();
};
Controller.prototype.resumeAd = function() {
  this.adUi.onAdsPlaying();
  this.sdkImpl.resumeAds();
};
Controller.prototype.togglePlayback = function() {
  this.playerWrapper.togglePlayback();
};
Controller.prototype.adsWillAutoplay = function() {
  if (this.settings.adsWillAutoplay !== void 0) {
    return this.settings.adsWillAutoplay;
  } else if (this.settings.adWillAutoplay !== void 0) {
    return this.settings.adWillAutoplay;
  } else {
    return !!this.playerWrapper.getPlayerOptions().autoplay;
  }
};
Controller.prototype.adsWillPlayMuted = function() {
  if (this.settings.adsWillPlayMuted !== void 0) {
    return this.settings.adsWillPlayMuted;
  } else if (this.settings.adWillPlayMuted !== void 0) {
    return this.settings.adWillPlayMuted;
  } else if (this.playerWrapper.getPlayerOptions().muted !== void 0) {
    return this.playerWrapper.getPlayerOptions().muted;
  } else {
    return this.playerWrapper.getVolume() == 0;
  }
};
Controller.prototype.triggerPlayerEvent = function(name2, data) {
  this.playerWrapper.triggerPlayerEvent(name2, data);
};
var PlayerWrapper$2 = function(player, adsPluginSettings, daiController) {
  this.vjsPlayer = player;
  this.daiController = daiController;
  this.vjsControls = this.vjsPlayer.getChild("controlBar");
  this.h5Player = null;
  this.vjsPlayer.on("dispose", this.playerDisposedListener.bind(this));
  this.vjsPlayer.on("pause", this.onPause.bind(this));
  this.vjsPlayer.on("play", this.onPlay.bind(this));
  this.vjsPlayer.on("seeked", this.onSeekEnd.bind(this));
  this.vjsPlayer.ready(this.onPlayerReady.bind(this));
  this.vjsPlayer.ads(adsPluginSettings);
};
PlayerWrapper$2.prototype.playerDisposedListener = function() {
  this.contentEndedListeners = [];
  this.daiController.onPlayerDisposed();
};
PlayerWrapper$2.prototype.onPause = function() {
  if (this.daiController.isInAdBreak()) {
    this.vjsControls.show();
  }
};
PlayerWrapper$2.prototype.onPlay = function() {
  if (this.daiController.isInAdBreak()) {
    this.vjsControls.hide();
  }
};
PlayerWrapper$2.prototype.onSeekEnd = function() {
  this.daiController.onSeekEnd(this.vjsPlayer.currentTime());
};
PlayerWrapper$2.prototype.onPlayerReady = function() {
  this.h5Player = document.getElementById(this.getPlayerId()).getElementsByClassName("vjs-tech")[0];
  this.daiController.onPlayerReady();
};
PlayerWrapper$2.prototype.getStreamPlayer = function() {
  return this.h5Player;
};
PlayerWrapper$2.prototype.getVjsPlayer = function() {
  return this.vjsPlayer;
};
PlayerWrapper$2.prototype.getPlayerOptions = function() {
  return this.vjsPlayer.options_;
};
PlayerWrapper$2.prototype.getPlayerId = function() {
  return this.vjsPlayer.id();
};
PlayerWrapper$2.prototype.onAdError = function(adErrorEvent) {
  this.vjsControls.show();
  const errorMessage = adErrorEvent.getError !== void 0 ? adErrorEvent.getError() : adErrorEvent.stack;
  this.vjsPlayer.trigger({ type: "adserror", data: {
    AdError: errorMessage,
    AdErrorEvent: adErrorEvent
  } });
};
PlayerWrapper$2.prototype.onAdBreakStart = function() {
  this.vjsControls.hide();
};
PlayerWrapper$2.prototype.onAdBreakEnd = function() {
  this.vjsControls.show();
};
PlayerWrapper$2.prototype.reset = function() {
  this.vjsControls.show();
};
var SdkImpl$2 = function(daiController) {
  this.daiController = daiController;
  this.streamPlayer = null;
  this.vjsPlayer = null;
  this.streamManager = null;
  this.uiSettings = new google.ima.dai.api.UiSettings();
  this.isAdBreak = false;
  this.isSnapback = false;
  this.snapForwardTime = 0;
  this.timedMetadata;
  this.metadataLoaded = {};
  this.SOURCE_TYPES = {
    hls: "application/x-mpegURL",
    dash: "application/dash+xml"
  };
};
SdkImpl$2.prototype.initImaDai = function() {
  this.streamPlayer = this.daiController.getStreamPlayer();
  this.vjsPlayer = this.daiController.getVjsPlayer();
  this.createAdUiDiv();
  if (this.daiController.getSettings().locale) {
    this.uiSettings.setLocale(this.daiController.getSettings().locale);
  }
  this.streamManager = new google.ima.dai.api.StreamManager(this.streamPlayer, this.adUiDiv, this.uiSettings);
  this.streamPlayer.addEventListener("pause", this.onStreamPause);
  this.streamPlayer.addEventListener("play", this.onStreamPlay);
  this.streamManager.addEventListener([google.ima.dai.api.StreamEvent.Type.LOADED, google.ima.dai.api.StreamEvent.Type.ERROR, google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED, google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED], this.onStreamEvent.bind(this), false);
  this.vjsPlayer.textTracks().onaddtrack = this.onAddTrack.bind(this);
  this.vjsPlayer.trigger({
    type: "stream-manager",
    StreamManager: this.streamManager
  });
  this.requestStream();
};
SdkImpl$2.prototype.onAddTrack = function(event) {
  const track = event.track;
  if (track.kind === "metadata") {
    track.mode = "hidden";
    track.oncuechange = (e) => {
      for (const cue of track.activeCues_) {
        const metadata = {};
        metadata[cue.value.key] = cue.value.data;
        this.streamManager.onTimedMetadata(metadata);
      }
    };
  }
};
SdkImpl$2.prototype.createAdUiDiv = function() {
  const uiDiv = document.createElement("div");
  uiDiv.id = "ad-ui";
  uiDiv.style.height = "calc(100% - 3em)";
  this.streamPlayer.parentNode.appendChild(uiDiv);
  this.adUiDiv = uiDiv;
};
SdkImpl$2.prototype.onStreamPause = function() {
  if (this.isAdBreak) {
    this.adUiDiv.style.display = "none";
  }
};
SdkImpl$2.prototype.onStreamPlay = function() {
  if (this.isAdBreak) {
    this.adUiDiv.style.display = "block";
  }
};
SdkImpl$2.prototype.onSeekEnd = function(currentTime) {
  const streamType = this.daiController.getSettings().streamType;
  if (streamType === "live") {
    return;
  }
  if (this.isSnapback) {
    this.isSnapback = false;
    return;
  }
  const previousCuePoint = this.streamManager.previousCuePointForStreamTime(currentTime);
  if (previousCuePoint && !previousCuePoint.played) {
    this.isSnapback = true;
    this.snapForwardTime = currentTime;
    this.vjsPlayer.currentTime(previousCuePoint.start);
  }
};
SdkImpl$2.prototype.onStreamEvent = function(event) {
  switch (event.type) {
    case google.ima.dai.api.StreamEvent.Type.LOADED:
      this.loadUrl(event.getStreamData().url);
      break;
    case google.ima.dai.api.StreamEvent.Type.ERROR:
      window.console.warn("Error loading stream, attempting to play backup stream. " + event.getStreamData().errorMessage);
      this.daiController.onErrorLoadingAds(event);
      if (this.daiController.getSettings().fallbackStreamUrl) {
        this.loadurl(this.daiController.getSettings().fallbackStreamUrl);
      }
      break;
    case google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED:
      this.isAdBreak = true;
      this.adUiDiv.style.display = "block";
      this.daiController.onAdBreakStart();
      break;
    case google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED:
      this.isAdBreak = false;
      this.adUiDiv.style.display = "none";
      this.daiController.onAdBreakEnd();
      if (this.snapForwardTime && this.snapForwardTime > this.vjsPlayer.currentTime()) {
        this.vjsPlayer.currentTime(this.snapForwardTime);
        this.snapForwardTime = 0;
      }
      break;
    default:
      break;
  }
};
SdkImpl$2.prototype.loadUrl = function(streamUrl) {
  this.vjsPlayer.ready(function() {
    const streamFormat = this.daiController.getSettings().streamFormat;
    this.vjsPlayer.src({
      src: streamUrl,
      type: this.SOURCE_TYPES[streamFormat]
    });
    const bookmarkTime = this.daiController.getSettings().bookmarkTime;
    if (bookmarkTime) {
      const startTime = this.streamManager.streamTimeForContentTime(bookmarkTime);
      this.isSnapback = true;
      this.vjsPlayer.currentTime(startTime);
    }
  }.bind(this));
};
SdkImpl$2.prototype.requestStream = function() {
  let streamRequest;
  const streamType = this.daiController.getSettings().streamType;
  if (streamType === "vod") {
    streamRequest = new google.ima.dai.api.VODStreamRequest();
    streamRequest.contentSourceId = this.daiController.getSettings().cmsId;
    streamRequest.videoId = this.daiController.getSettings().videoId;
  } else if (streamType === "live") {
    streamRequest = new google.ima.dai.api.LiveStreamRequest();
    streamRequest.assetKey = this.daiController.getSettings().assetKey;
  } else {
    window.console.warn("No valid stream type selected");
  }
  streamRequest.format = this.daiController.getSettings().streamFormat;
  if (this.daiController.getSettings().apiKey) {
    streamRequest.apiKey = this.daiController.getSettings().apiKey;
  }
  if (this.daiController.getSettings().authKey) {
    streamRequest.authKey = this.daiController.getSettings().authKey;
  }
  if (this.daiController.getSettings().adTagParameters) {
    streamRequest.adTagParameters = this.daiController.getSettings().adTagParameters;
  }
  if (this.daiController.getSettings().streamActivityMonitorId) {
    streamRequest.streamActivityMonitorId = this.daiController.getSettings().streamActivityMonitorId;
  }
  if (this.daiController.getSettings().omidMode) {
    streamRequest.omidAccessModeRules = {};
    const omidValues = this.daiController.getSettings().omidMode;
    if (omidValues.FULL) {
      streamRequest.omidAccessModeRules[google.ima.OmidAccessMode.FULL] = omidValues.FULL;
    }
    if (omidValues.DOMAIN) {
      streamRequest.omidAccessModeRules[google.ima.OmidAccessMode.DOMAIN] = omidValues.DOMAIN;
    }
    if (omidValues.LIMITED) {
      streamRequest.omidAccessModeRules[google.ima.OmidAccessMode.LIMITED] = omidValues.LIMITED;
    }
  }
  this.streamManager.requestStream(streamRequest);
  this.vjsPlayer.trigger({
    type: "stream-request",
    StreamRequest: streamRequest
  });
};
SdkImpl$2.prototype.onPlayerReady = function() {
  this.initImaDai();
};
SdkImpl$2.prototype.onPlayerDisposed = function() {
  if (this.streamManager) {
    this.streamManager.reset();
  }
};
SdkImpl$2.prototype.getStreamManager = function() {
  return this.StreamManager;
};
SdkImpl$2.prototype.reset = function() {
  if (this.StreamManager) {
    this.StreamManager.reset();
  }
};
var DaiController = function(player, options) {
  this.inAdBreak = false;
  this.settings = {};
  this.isMobile = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/Android/i);
  this.isIos = navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i);
  this.initWithSettings(options);
  const contribAdsDefaults = {
    debug: this.settings.debug,
    timeout: this.settings.timeout,
    prerollTimeout: this.settings.prerollTimeout
  };
  const adsPluginSettings = Object.assign({}, contribAdsDefaults, options.contribAdsSettings || {});
  this.playerWrapper = new PlayerWrapper$2(player, adsPluginSettings, this);
  this.sdkImpl = new SdkImpl$2(this);
};
DaiController.IMA_DEFAULTS = {
  adLabel: "Advertisement",
  adLabelNofN: "of",
  debug: false,
  disableAdControls: false,
  showControlsForJSAds: true
};
DaiController.prototype.initWithSettings = function(options) {
  this.settings = Object.assign({}, DaiController.IMA_DEFAULTS, options || {});
  this.warnAboutDeprecatedSettings();
  this.showCountdown = true;
  if (this.settings.showCountdown === false) {
    this.showCountdown = false;
  }
};
DaiController.prototype.warnAboutDeprecatedSettings = function() {
  const deprecatedSettings = [];
  deprecatedSettings.forEach((setting) => {
    if (this.settings[setting] !== void 0) {
      console.warn("WARNING: videojs.imaDai setting " + setting + " is deprecated");
    }
  });
};
DaiController.prototype.getSettings = function() {
  return this.settings;
};
DaiController.prototype.getIsMobile = function() {
  return this.isMobile;
};
DaiController.prototype.getIsIos = function() {
  return this.isIos;
};
DaiController.prototype.getStreamPlayer = function() {
  return this.playerWrapper.getStreamPlayer();
};
DaiController.prototype.getVjsPlayer = function() {
  return this.playerWrapper.getVjsPlayer();
};
DaiController.prototype.requestStream = function() {
  this.sdkImpl.requestStream();
};
DaiController.prototype.setSetting = function(key, value) {
  this.settings[key] = value;
};
DaiController.prototype.onErrorLoadingAds = function(adErrorEvent) {
  this.playerWrapper.onAdError(adErrorEvent);
};
DaiController.prototype.onAdError = function(adErrorEvent) {
  this.playerWrapper.onAdError(adErrorEvent);
};
DaiController.prototype.onAdBreakStart = function() {
  this.inAdBreak = true;
  this.playerWrapper.onAdBreakStart();
};
DaiController.prototype.onAdBreakEnd = function() {
  this.inAdBreak = false;
  this.playerWrapper.onAdBreakEnd();
};
DaiController.prototype.onPlayerDisposed = function() {
  this.contentAndAdsEndedListeners = [];
  this.sdkImpl.onPlayerDisposed();
};
DaiController.prototype.isInAdBreak = function() {
  return this.inAdBreak;
};
DaiController.prototype.onSeekEnd = function(currentTime) {
  this.sdkImpl.onSeekEnd(currentTime);
};
DaiController.prototype.onPlayerReady = function() {
  this.sdkImpl.onPlayerReady();
};
DaiController.prototype.reset = function() {
  this.sdkImpl.reset();
  this.playerWrapper.reset();
};
DaiController.prototype.addEventListener = function(event, callback) {
  this.sdkImpl.addEventListener(event, callback);
};
DaiController.prototype.getStreamManager = function() {
  return this.sdkImpl.getStreamManager();
};
DaiController.prototype.getPlayerId = function() {
  return this.playerWrapper.getPlayerId();
};
DaiController.prototype.streamWillAutoplay = function() {
  if (this.settings.streamWillAutoplay !== void 0) {
    return this.settings.streamWillAutoplay;
  } else {
    return !!this.playerWrapper.getPlayerOptions().autoplay;
  }
};
DaiController.prototype.triggerPlayerEvent = function(name2, data) {
  this.playerWrapper.triggerPlayerEvent(name2, data);
};
var ImaPlugin = function(player, options) {
  this.controller = new Controller(player, options);
  this.addContentAndAdsEndedListener = function(listener) {
    this.controller.addContentAndAdsEndedListener(listener);
  }.bind(this);
  this.addContentEndedListener = function(listener) {
    this.controller.addContentEndedListener(listener);
  }.bind(this);
  this.addEventListener = function(event, callback) {
    this.controller.addEventListener(event, callback);
  }.bind(this);
  this.changeAdTag = function(adTag) {
    this.controller.changeAdTag(adTag);
  }.bind(this);
  this.getAdsManager = function() {
    return this.controller.getAdsManager();
  }.bind(this);
  this.initializeAdDisplayContainer = function() {
    this.controller.initializeAdDisplayContainer();
  }.bind(this);
  this.pauseAd = function() {
    this.controller.pauseAd();
  }.bind(this);
  this.playAdBreak = function() {
    this.controller.playAdBreak();
  }.bind(this);
  this.requestAds = function() {
    this.controller.requestAds();
  }.bind(this);
  this.resumeAd = function() {
    this.controller.resumeAd();
  }.bind(this);
  this.setAdBreakReadyListener = function(listener) {
    this.controller.setAdBreakReadyListener(listener);
  }.bind(this);
  this.setContentWithAdTag = function(contentSrc, adTag) {
    this.controller.setContentWithAdTag(contentSrc, adTag);
  }.bind(this);
  this.setContentWithAdsResponse = function(contentSrc, adsResponse) {
    this.controller.setContentWithAdsResponse(contentSrc, adsResponse);
  }.bind(this);
  this.setContentWithAdsRequest = function(contentSrc, adsRequest) {
    this.controller.setContentWithAdsRequest(contentSrc, adsRequest);
  }.bind(this);
  this.setShowCountdown = function(showCountdownIn) {
    this.controller.setShowCountdown(showCountdownIn);
  }.bind(this);
};
var ImaDaiPlugin = function(player, options) {
  this.controller = new DaiController(player, options);
  this.streamEndedListener = function(listener) {
    this.controller.addStreamEndedListener(listener);
  }.bind(this);
  this.addEventListener = function(event, callback) {
    this.controller.addEventListener(event, callback);
  }.bind(this);
  this.getStreamManager = function() {
    return this.controller.getStreamManager();
  }.bind(this);
};
var init = function(options) {
  this.ima = new ImaPlugin(this, options);
};
var LiveStream = class {
  constructor(streamFormat, assetKey) {
    streamFormat = streamFormat.toLowerCase();
    if (streamFormat !== "hls" && streamFormat !== "dash") {
      window.console.error("VodStream error: incorrect streamFormat.");
      return;
    } else if (streamFormat === "dash") {
      window.console.error("streamFormat error: DASH streams are notcurrently supported by this plugin.");
      return;
    } else if (typeof assetKey !== "string") {
      window.console.error("assetKey error: value must be string.");
      return;
    }
    this.streamFormat = streamFormat;
    this.assetKey = assetKey;
  }
};
var VodStream = class {
  constructor(streamFormat, cmsId, videoId) {
    streamFormat = streamFormat.toLowerCase();
    if (streamFormat !== "hls" && streamFormat !== "dash") {
      window.console.error("VodStream error: incorrect streamFormat.");
      return;
    } else if (streamFormat === "dash") {
      window.console.error("streamFormat error: DASH streams are notcurrently supported by this plugin.");
      return;
    } else if (typeof cmsId !== "string") {
      window.console.error("cmsId error: value must be string.");
      return;
    } else if (typeof videoId !== "string") {
      window.console.error("videoId error: value must be string.");
      return;
    }
    this.streamFormat = streamFormat;
    this.cmsId = cmsId;
    this.videoId = videoId;
  }
};
var initDai = function(stream, options) {
  if (stream instanceof LiveStream) {
    options.streamType = "live";
    options.assetKey = stream.assetKey;
  } else if (stream instanceof VodStream) {
    options.streamType = "vod";
    options.cmsId = stream.cmsId;
    options.videoId = stream.videoId;
  } else {
    window.console.error("initDai() first parameter must be an instance of LiveStream or VodStream.");
    return;
  }
  options.streamFormat = stream.streamFormat;
  this.imaDai = new ImaDaiPlugin(this, options);
};
var registerPlugin = video_es_default.registerPlugin || video_es_default.plugin;
registerPlugin("ima", init);
registerPlugin("imaDai", initDai);
var videojs_ima_es_default = ImaPlugin;

// dep:videojs-ima
var videojs_ima_default = videojs_ima_es_default;
export {
  LiveStream,
  VodStream,
  videojs_ima_default as default
};
//# sourceMappingURL=videojs-ima.js.map
